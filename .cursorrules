always assume the existing code is correct unless you have a good reason to believe otherwise or you have been explicitly told otherwise
never modify significant portions of code without asking
testing code is your primary mehtod of validation, each change should have a very specific and snall test that covers it and it should be tested to make sure it works before moving on
approach your work with a very specific and small goal in mind, then break that goal down into smaller goals until you have a plan to complete the task - follow the same approach for testing as well
lay out our methodical approach to working on a task in the form of a test plan, then write the code to pass the test
leave hints for yourself in the future in the form of todos and comments, assume that you will forget what you were thinking and that you will need to come back to it and that you will need to be able to understand what you were thinking - as an example, if the ast definitions for a package are in a specific file, mention that somewhere in the code so you know to look there when you need to reference them
always be an expert in the 3rd party packages we heavily depend on, git clone them into a tmp directories for easy reference and access when relevant
always use the root ./go insead of go from the shell path - there are helpful wrappers in the project that make it easier to run tools
always use the root ./task instead of task from the shell path - there are helpful wrappers in the project that make it easier to run tasks

documentation:
use lots of emojis and draw ASCII art diagrams to help explain things, i am a visual learner
document things visually like crazy - not just for humans, but so that agents are able to pick up where you left off and continue working while understanding your reasoning
always prefer visual documentation over text documentation, when text is required, make it as simple and as short as possible and use emojis to help explain things
in markdown files you can use mermaid diagrams to help explain things, but in our conversations please use ASCII art

golang imports:
always assume that broken imports are because the reference need to be adjusted, not because the thing being referenced doesn't exist
never directly modify go.mod or go.sum files, always use go mod tidy and go mod init to update them (or other commands that are appropriate)

golang testing:
test case names should always not contain spaces or special characters (ex: "test_case_name")
always use testify/assert for assertions, testify/require for checking errors and testify/mock for creating mocks
code and functions should be written in a way that is delibrtaly easy to test
unit tests should be written in a way that is easy to understand and easy to write, yet overall increadibly exhaustive primarily by breadth of simple focused tests
assume one hat at a times (testing, writing code, refactoring) and make sure to check lints and tests before moving between hats
be extremely careful when modifying \_test.go files and regular go files in the same composer run
always add messages to tests, like: require.NoError(t, err, "hover request should succeed")
never rename the test package from "x_test" to "x" - always prefer the \_test suffix unless absolutely necessary

golang mocks:
always use interfaces and then add them to .mockery.yaml which will generate the mocks in ./gen/mockery by calling "task generate" in the root of the project
always use .EXPECT() to set up expectations for mocks

golang logging:
always use zerolog for logging
pass context.Context to zerolog.Ctx(ctx) to get a logger with context
all functions that log should have a context.Context as the first argument
context should be created as early as possible in the program and passed around to all functions that need it
individual packages should not define their own logging logic (unless required, like a server needing to control standard out), instead they should use the logger passed to them

golang debugging:
run linting checks and tests before you make changes to get a better sense of what errors you might be introducing
always assume errors you introduce are a result of code you wrote, if you think otherwise, ask to make sure you can make changes elsewhere.
utilize "github.com/k0kubun/pp/v3" pp.Printf to print out the structure of variables for debugging purposes
always run specific tests to isolate the problem, use -v sparingly - you should still see logs for ones that fail

golang errors:
always use gitlab.com/tozd/go/errors for golang errors
always use errors.Errorf to wrap golangerrors, never use errors.Wrap
the wrapped error naming philosophy should always make the error message say what was trying to be done, not what went wrong (i.e. errors.Errorf("reading file: %w", err))
for new errors the name just needs to be the best name for that error
