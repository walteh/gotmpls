// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	protocol "github.com/walteh/gotmpls/pkg/lsp/protocol"
)

// MockClient_protocol is an autogenerated mock type for the Client type
type MockClient_protocol struct {
	mock.Mock
}

type MockClient_protocol_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient_protocol) EXPECT() *MockClient_protocol_Expecter {
	return &MockClient_protocol_Expecter{mock: &_m.Mock}
}

// ApplyEdit provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) ApplyEdit(_a0 context.Context, _a1 *protocol.ApplyWorkspaceEditParams) (*protocol.ApplyWorkspaceEditResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ApplyEdit")
	}

	var r0 *protocol.ApplyWorkspaceEditResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ApplyWorkspaceEditParams) (*protocol.ApplyWorkspaceEditResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ApplyWorkspaceEditParams) *protocol.ApplyWorkspaceEditResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ApplyWorkspaceEditResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ApplyWorkspaceEditParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_protocol_ApplyEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyEdit'
type MockClient_protocol_ApplyEdit_Call struct {
	*mock.Call
}

// ApplyEdit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ApplyWorkspaceEditParams
func (_e *MockClient_protocol_Expecter) ApplyEdit(_a0 interface{}, _a1 interface{}) *MockClient_protocol_ApplyEdit_Call {
	return &MockClient_protocol_ApplyEdit_Call{Call: _e.mock.On("ApplyEdit", _a0, _a1)}
}

func (_c *MockClient_protocol_ApplyEdit_Call) Run(run func(_a0 context.Context, _a1 *protocol.ApplyWorkspaceEditParams)) *MockClient_protocol_ApplyEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ApplyWorkspaceEditParams))
	})
	return _c
}

func (_c *MockClient_protocol_ApplyEdit_Call) Return(_a0 *protocol.ApplyWorkspaceEditResult, _a1 error) *MockClient_protocol_ApplyEdit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_protocol_ApplyEdit_Call) RunAndReturn(run func(context.Context, *protocol.ApplyWorkspaceEditParams) (*protocol.ApplyWorkspaceEditResult, error)) *MockClient_protocol_ApplyEdit_Call {
	_c.Call.Return(run)
	return _c
}

// CodeLensRefresh provides a mock function with given fields: _a0
func (_m *MockClient_protocol) CodeLensRefresh(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CodeLensRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_CodeLensRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CodeLensRefresh'
type MockClient_protocol_CodeLensRefresh_Call struct {
	*mock.Call
}

// CodeLensRefresh is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) CodeLensRefresh(_a0 interface{}) *MockClient_protocol_CodeLensRefresh_Call {
	return &MockClient_protocol_CodeLensRefresh_Call{Call: _e.mock.On("CodeLensRefresh", _a0)}
}

func (_c *MockClient_protocol_CodeLensRefresh_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_CodeLensRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_CodeLensRefresh_Call) Return(_a0 error) *MockClient_protocol_CodeLensRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_CodeLensRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_protocol_CodeLensRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) Configuration(_a0 context.Context, _a1 *protocol.ParamConfiguration) ([]interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ParamConfiguration) ([]interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ParamConfiguration) []interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ParamConfiguration) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_protocol_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type MockClient_protocol_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ParamConfiguration
func (_e *MockClient_protocol_Expecter) Configuration(_a0 interface{}, _a1 interface{}) *MockClient_protocol_Configuration_Call {
	return &MockClient_protocol_Configuration_Call{Call: _e.mock.On("Configuration", _a0, _a1)}
}

func (_c *MockClient_protocol_Configuration_Call) Run(run func(_a0 context.Context, _a1 *protocol.ParamConfiguration)) *MockClient_protocol_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ParamConfiguration))
	})
	return _c
}

func (_c *MockClient_protocol_Configuration_Call) Return(_a0 []interface{}, _a1 error) *MockClient_protocol_Configuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_protocol_Configuration_Call) RunAndReturn(run func(context.Context, *protocol.ParamConfiguration) ([]interface{}, error)) *MockClient_protocol_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticRefresh provides a mock function with given fields: _a0
func (_m *MockClient_protocol) DiagnosticRefresh(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_DiagnosticRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticRefresh'
type MockClient_protocol_DiagnosticRefresh_Call struct {
	*mock.Call
}

// DiagnosticRefresh is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) DiagnosticRefresh(_a0 interface{}) *MockClient_protocol_DiagnosticRefresh_Call {
	return &MockClient_protocol_DiagnosticRefresh_Call{Call: _e.mock.On("DiagnosticRefresh", _a0)}
}

func (_c *MockClient_protocol_DiagnosticRefresh_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_DiagnosticRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_DiagnosticRefresh_Call) Return(_a0 error) *MockClient_protocol_DiagnosticRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_DiagnosticRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_protocol_DiagnosticRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) Event(_a0 context.Context, _a1 *interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Event")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockClient_protocol_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *interface{}
func (_e *MockClient_protocol_Expecter) Event(_a0 interface{}, _a1 interface{}) *MockClient_protocol_Event_Call {
	return &MockClient_protocol_Event_Call{Call: _e.mock.On("Event", _a0, _a1)}
}

func (_c *MockClient_protocol_Event_Call) Run(run func(_a0 context.Context, _a1 *interface{})) *MockClient_protocol_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*interface{}))
	})
	return _c
}

func (_c *MockClient_protocol_Event_Call) Return(_a0 error) *MockClient_protocol_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_Event_Call) RunAndReturn(run func(context.Context, *interface{}) error) *MockClient_protocol_Event_Call {
	_c.Call.Return(run)
	return _c
}

// FoldingRangeRefresh provides a mock function with given fields: _a0
func (_m *MockClient_protocol) FoldingRangeRefresh(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FoldingRangeRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_FoldingRangeRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FoldingRangeRefresh'
type MockClient_protocol_FoldingRangeRefresh_Call struct {
	*mock.Call
}

// FoldingRangeRefresh is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) FoldingRangeRefresh(_a0 interface{}) *MockClient_protocol_FoldingRangeRefresh_Call {
	return &MockClient_protocol_FoldingRangeRefresh_Call{Call: _e.mock.On("FoldingRangeRefresh", _a0)}
}

func (_c *MockClient_protocol_FoldingRangeRefresh_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_FoldingRangeRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_FoldingRangeRefresh_Call) Return(_a0 error) *MockClient_protocol_FoldingRangeRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_FoldingRangeRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_protocol_FoldingRangeRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// InlayHintRefresh provides a mock function with given fields: _a0
func (_m *MockClient_protocol) InlayHintRefresh(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InlayHintRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_InlayHintRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InlayHintRefresh'
type MockClient_protocol_InlayHintRefresh_Call struct {
	*mock.Call
}

// InlayHintRefresh is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) InlayHintRefresh(_a0 interface{}) *MockClient_protocol_InlayHintRefresh_Call {
	return &MockClient_protocol_InlayHintRefresh_Call{Call: _e.mock.On("InlayHintRefresh", _a0)}
}

func (_c *MockClient_protocol_InlayHintRefresh_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_InlayHintRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_InlayHintRefresh_Call) Return(_a0 error) *MockClient_protocol_InlayHintRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_InlayHintRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_protocol_InlayHintRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// InlineValueRefresh provides a mock function with given fields: _a0
func (_m *MockClient_protocol) InlineValueRefresh(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InlineValueRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_InlineValueRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InlineValueRefresh'
type MockClient_protocol_InlineValueRefresh_Call struct {
	*mock.Call
}

// InlineValueRefresh is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) InlineValueRefresh(_a0 interface{}) *MockClient_protocol_InlineValueRefresh_Call {
	return &MockClient_protocol_InlineValueRefresh_Call{Call: _e.mock.On("InlineValueRefresh", _a0)}
}

func (_c *MockClient_protocol_InlineValueRefresh_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_InlineValueRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_InlineValueRefresh_Call) Return(_a0 error) *MockClient_protocol_InlineValueRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_InlineValueRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_protocol_InlineValueRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// LogMessage provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) LogMessage(_a0 context.Context, _a1 *protocol.LogMessageParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LogMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.LogMessageParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_LogMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogMessage'
type MockClient_protocol_LogMessage_Call struct {
	*mock.Call
}

// LogMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.LogMessageParams
func (_e *MockClient_protocol_Expecter) LogMessage(_a0 interface{}, _a1 interface{}) *MockClient_protocol_LogMessage_Call {
	return &MockClient_protocol_LogMessage_Call{Call: _e.mock.On("LogMessage", _a0, _a1)}
}

func (_c *MockClient_protocol_LogMessage_Call) Run(run func(_a0 context.Context, _a1 *protocol.LogMessageParams)) *MockClient_protocol_LogMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.LogMessageParams))
	})
	return _c
}

func (_c *MockClient_protocol_LogMessage_Call) Return(_a0 error) *MockClient_protocol_LogMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_LogMessage_Call) RunAndReturn(run func(context.Context, *protocol.LogMessageParams) error) *MockClient_protocol_LogMessage_Call {
	_c.Call.Return(run)
	return _c
}

// LogTrace provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) LogTrace(_a0 context.Context, _a1 *protocol.LogTraceParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LogTrace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.LogTraceParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_LogTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTrace'
type MockClient_protocol_LogTrace_Call struct {
	*mock.Call
}

// LogTrace is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.LogTraceParams
func (_e *MockClient_protocol_Expecter) LogTrace(_a0 interface{}, _a1 interface{}) *MockClient_protocol_LogTrace_Call {
	return &MockClient_protocol_LogTrace_Call{Call: _e.mock.On("LogTrace", _a0, _a1)}
}

func (_c *MockClient_protocol_LogTrace_Call) Run(run func(_a0 context.Context, _a1 *protocol.LogTraceParams)) *MockClient_protocol_LogTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.LogTraceParams))
	})
	return _c
}

func (_c *MockClient_protocol_LogTrace_Call) Return(_a0 error) *MockClient_protocol_LogTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_LogTrace_Call) RunAndReturn(run func(context.Context, *protocol.LogTraceParams) error) *MockClient_protocol_LogTrace_Call {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) Progress(_a0 context.Context, _a1 *protocol.ProgressParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ProgressParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type MockClient_protocol_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ProgressParams
func (_e *MockClient_protocol_Expecter) Progress(_a0 interface{}, _a1 interface{}) *MockClient_protocol_Progress_Call {
	return &MockClient_protocol_Progress_Call{Call: _e.mock.On("Progress", _a0, _a1)}
}

func (_c *MockClient_protocol_Progress_Call) Run(run func(_a0 context.Context, _a1 *protocol.ProgressParams)) *MockClient_protocol_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ProgressParams))
	})
	return _c
}

func (_c *MockClient_protocol_Progress_Call) Return(_a0 error) *MockClient_protocol_Progress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_Progress_Call) RunAndReturn(run func(context.Context, *protocol.ProgressParams) error) *MockClient_protocol_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// PublishDiagnostics provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) PublishDiagnostics(_a0 context.Context, _a1 *protocol.PublishDiagnosticsParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PublishDiagnostics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.PublishDiagnosticsParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_PublishDiagnostics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishDiagnostics'
type MockClient_protocol_PublishDiagnostics_Call struct {
	*mock.Call
}

// PublishDiagnostics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.PublishDiagnosticsParams
func (_e *MockClient_protocol_Expecter) PublishDiagnostics(_a0 interface{}, _a1 interface{}) *MockClient_protocol_PublishDiagnostics_Call {
	return &MockClient_protocol_PublishDiagnostics_Call{Call: _e.mock.On("PublishDiagnostics", _a0, _a1)}
}

func (_c *MockClient_protocol_PublishDiagnostics_Call) Run(run func(_a0 context.Context, _a1 *protocol.PublishDiagnosticsParams)) *MockClient_protocol_PublishDiagnostics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.PublishDiagnosticsParams))
	})
	return _c
}

func (_c *MockClient_protocol_PublishDiagnostics_Call) Return(_a0 error) *MockClient_protocol_PublishDiagnostics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_PublishDiagnostics_Call) RunAndReturn(run func(context.Context, *protocol.PublishDiagnosticsParams) error) *MockClient_protocol_PublishDiagnostics_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCapability provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) RegisterCapability(_a0 context.Context, _a1 *protocol.RegistrationParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCapability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RegistrationParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_RegisterCapability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCapability'
type MockClient_protocol_RegisterCapability_Call struct {
	*mock.Call
}

// RegisterCapability is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.RegistrationParams
func (_e *MockClient_protocol_Expecter) RegisterCapability(_a0 interface{}, _a1 interface{}) *MockClient_protocol_RegisterCapability_Call {
	return &MockClient_protocol_RegisterCapability_Call{Call: _e.mock.On("RegisterCapability", _a0, _a1)}
}

func (_c *MockClient_protocol_RegisterCapability_Call) Run(run func(_a0 context.Context, _a1 *protocol.RegistrationParams)) *MockClient_protocol_RegisterCapability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.RegistrationParams))
	})
	return _c
}

func (_c *MockClient_protocol_RegisterCapability_Call) Return(_a0 error) *MockClient_protocol_RegisterCapability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_RegisterCapability_Call) RunAndReturn(run func(context.Context, *protocol.RegistrationParams) error) *MockClient_protocol_RegisterCapability_Call {
	_c.Call.Return(run)
	return _c
}

// SemanticTokensRefresh provides a mock function with given fields: _a0
func (_m *MockClient_protocol) SemanticTokensRefresh(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SemanticTokensRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_SemanticTokensRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SemanticTokensRefresh'
type MockClient_protocol_SemanticTokensRefresh_Call struct {
	*mock.Call
}

// SemanticTokensRefresh is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) SemanticTokensRefresh(_a0 interface{}) *MockClient_protocol_SemanticTokensRefresh_Call {
	return &MockClient_protocol_SemanticTokensRefresh_Call{Call: _e.mock.On("SemanticTokensRefresh", _a0)}
}

func (_c *MockClient_protocol_SemanticTokensRefresh_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_SemanticTokensRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_SemanticTokensRefresh_Call) Return(_a0 error) *MockClient_protocol_SemanticTokensRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_SemanticTokensRefresh_Call) RunAndReturn(run func(context.Context) error) *MockClient_protocol_SemanticTokensRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// ShowDocument provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) ShowDocument(_a0 context.Context, _a1 *protocol.ShowDocumentParams) (*protocol.ShowDocumentResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShowDocument")
	}

	var r0 *protocol.ShowDocumentResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ShowDocumentParams) (*protocol.ShowDocumentResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ShowDocumentParams) *protocol.ShowDocumentResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ShowDocumentResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ShowDocumentParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_protocol_ShowDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowDocument'
type MockClient_protocol_ShowDocument_Call struct {
	*mock.Call
}

// ShowDocument is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ShowDocumentParams
func (_e *MockClient_protocol_Expecter) ShowDocument(_a0 interface{}, _a1 interface{}) *MockClient_protocol_ShowDocument_Call {
	return &MockClient_protocol_ShowDocument_Call{Call: _e.mock.On("ShowDocument", _a0, _a1)}
}

func (_c *MockClient_protocol_ShowDocument_Call) Run(run func(_a0 context.Context, _a1 *protocol.ShowDocumentParams)) *MockClient_protocol_ShowDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ShowDocumentParams))
	})
	return _c
}

func (_c *MockClient_protocol_ShowDocument_Call) Return(_a0 *protocol.ShowDocumentResult, _a1 error) *MockClient_protocol_ShowDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_protocol_ShowDocument_Call) RunAndReturn(run func(context.Context, *protocol.ShowDocumentParams) (*protocol.ShowDocumentResult, error)) *MockClient_protocol_ShowDocument_Call {
	_c.Call.Return(run)
	return _c
}

// ShowMessage provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) ShowMessage(_a0 context.Context, _a1 *protocol.ShowMessageParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShowMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ShowMessageParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_ShowMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowMessage'
type MockClient_protocol_ShowMessage_Call struct {
	*mock.Call
}

// ShowMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ShowMessageParams
func (_e *MockClient_protocol_Expecter) ShowMessage(_a0 interface{}, _a1 interface{}) *MockClient_protocol_ShowMessage_Call {
	return &MockClient_protocol_ShowMessage_Call{Call: _e.mock.On("ShowMessage", _a0, _a1)}
}

func (_c *MockClient_protocol_ShowMessage_Call) Run(run func(_a0 context.Context, _a1 *protocol.ShowMessageParams)) *MockClient_protocol_ShowMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ShowMessageParams))
	})
	return _c
}

func (_c *MockClient_protocol_ShowMessage_Call) Return(_a0 error) *MockClient_protocol_ShowMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_ShowMessage_Call) RunAndReturn(run func(context.Context, *protocol.ShowMessageParams) error) *MockClient_protocol_ShowMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ShowMessageRequest provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) ShowMessageRequest(_a0 context.Context, _a1 *protocol.ShowMessageRequestParams) (*protocol.MessageActionItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShowMessageRequest")
	}

	var r0 *protocol.MessageActionItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ShowMessageRequestParams) (*protocol.MessageActionItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ShowMessageRequestParams) *protocol.MessageActionItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.MessageActionItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ShowMessageRequestParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_protocol_ShowMessageRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowMessageRequest'
type MockClient_protocol_ShowMessageRequest_Call struct {
	*mock.Call
}

// ShowMessageRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ShowMessageRequestParams
func (_e *MockClient_protocol_Expecter) ShowMessageRequest(_a0 interface{}, _a1 interface{}) *MockClient_protocol_ShowMessageRequest_Call {
	return &MockClient_protocol_ShowMessageRequest_Call{Call: _e.mock.On("ShowMessageRequest", _a0, _a1)}
}

func (_c *MockClient_protocol_ShowMessageRequest_Call) Run(run func(_a0 context.Context, _a1 *protocol.ShowMessageRequestParams)) *MockClient_protocol_ShowMessageRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ShowMessageRequestParams))
	})
	return _c
}

func (_c *MockClient_protocol_ShowMessageRequest_Call) Return(_a0 *protocol.MessageActionItem, _a1 error) *MockClient_protocol_ShowMessageRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_protocol_ShowMessageRequest_Call) RunAndReturn(run func(context.Context, *protocol.ShowMessageRequestParams) (*protocol.MessageActionItem, error)) *MockClient_protocol_ShowMessageRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TextDocumentContentRefresh provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) TextDocumentContentRefresh(_a0 context.Context, _a1 *protocol.TextDocumentContentRefreshParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TextDocumentContentRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TextDocumentContentRefreshParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_TextDocumentContentRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextDocumentContentRefresh'
type MockClient_protocol_TextDocumentContentRefresh_Call struct {
	*mock.Call
}

// TextDocumentContentRefresh is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.TextDocumentContentRefreshParams
func (_e *MockClient_protocol_Expecter) TextDocumentContentRefresh(_a0 interface{}, _a1 interface{}) *MockClient_protocol_TextDocumentContentRefresh_Call {
	return &MockClient_protocol_TextDocumentContentRefresh_Call{Call: _e.mock.On("TextDocumentContentRefresh", _a0, _a1)}
}

func (_c *MockClient_protocol_TextDocumentContentRefresh_Call) Run(run func(_a0 context.Context, _a1 *protocol.TextDocumentContentRefreshParams)) *MockClient_protocol_TextDocumentContentRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.TextDocumentContentRefreshParams))
	})
	return _c
}

func (_c *MockClient_protocol_TextDocumentContentRefresh_Call) Return(_a0 error) *MockClient_protocol_TextDocumentContentRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_TextDocumentContentRefresh_Call) RunAndReturn(run func(context.Context, *protocol.TextDocumentContentRefreshParams) error) *MockClient_protocol_TextDocumentContentRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterCapability provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) UnregisterCapability(_a0 context.Context, _a1 *protocol.UnregistrationParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterCapability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.UnregistrationParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_UnregisterCapability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterCapability'
type MockClient_protocol_UnregisterCapability_Call struct {
	*mock.Call
}

// UnregisterCapability is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.UnregistrationParams
func (_e *MockClient_protocol_Expecter) UnregisterCapability(_a0 interface{}, _a1 interface{}) *MockClient_protocol_UnregisterCapability_Call {
	return &MockClient_protocol_UnregisterCapability_Call{Call: _e.mock.On("UnregisterCapability", _a0, _a1)}
}

func (_c *MockClient_protocol_UnregisterCapability_Call) Run(run func(_a0 context.Context, _a1 *protocol.UnregistrationParams)) *MockClient_protocol_UnregisterCapability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.UnregistrationParams))
	})
	return _c
}

func (_c *MockClient_protocol_UnregisterCapability_Call) Return(_a0 error) *MockClient_protocol_UnregisterCapability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_UnregisterCapability_Call) RunAndReturn(run func(context.Context, *protocol.UnregistrationParams) error) *MockClient_protocol_UnregisterCapability_Call {
	_c.Call.Return(run)
	return _c
}

// WorkDoneProgressCreate provides a mock function with given fields: _a0, _a1
func (_m *MockClient_protocol) WorkDoneProgressCreate(_a0 context.Context, _a1 *protocol.WorkDoneProgressCreateParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WorkDoneProgressCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkDoneProgressCreateParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_protocol_WorkDoneProgressCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkDoneProgressCreate'
type MockClient_protocol_WorkDoneProgressCreate_Call struct {
	*mock.Call
}

// WorkDoneProgressCreate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WorkDoneProgressCreateParams
func (_e *MockClient_protocol_Expecter) WorkDoneProgressCreate(_a0 interface{}, _a1 interface{}) *MockClient_protocol_WorkDoneProgressCreate_Call {
	return &MockClient_protocol_WorkDoneProgressCreate_Call{Call: _e.mock.On("WorkDoneProgressCreate", _a0, _a1)}
}

func (_c *MockClient_protocol_WorkDoneProgressCreate_Call) Run(run func(_a0 context.Context, _a1 *protocol.WorkDoneProgressCreateParams)) *MockClient_protocol_WorkDoneProgressCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WorkDoneProgressCreateParams))
	})
	return _c
}

func (_c *MockClient_protocol_WorkDoneProgressCreate_Call) Return(_a0 error) *MockClient_protocol_WorkDoneProgressCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_protocol_WorkDoneProgressCreate_Call) RunAndReturn(run func(context.Context, *protocol.WorkDoneProgressCreateParams) error) *MockClient_protocol_WorkDoneProgressCreate_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspaceFolders provides a mock function with given fields: _a0
func (_m *MockClient_protocol) WorkspaceFolders(_a0 context.Context) ([]protocol.WorkspaceFolder, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WorkspaceFolders")
	}

	var r0 []protocol.WorkspaceFolder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]protocol.WorkspaceFolder, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []protocol.WorkspaceFolder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.WorkspaceFolder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_protocol_WorkspaceFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceFolders'
type MockClient_protocol_WorkspaceFolders_Call struct {
	*mock.Call
}

// WorkspaceFolders is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockClient_protocol_Expecter) WorkspaceFolders(_a0 interface{}) *MockClient_protocol_WorkspaceFolders_Call {
	return &MockClient_protocol_WorkspaceFolders_Call{Call: _e.mock.On("WorkspaceFolders", _a0)}
}

func (_c *MockClient_protocol_WorkspaceFolders_Call) Run(run func(_a0 context.Context)) *MockClient_protocol_WorkspaceFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_protocol_WorkspaceFolders_Call) Return(_a0 []protocol.WorkspaceFolder, _a1 error) *MockClient_protocol_WorkspaceFolders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_protocol_WorkspaceFolders_Call) RunAndReturn(run func(context.Context) ([]protocol.WorkspaceFolder, error)) *MockClient_protocol_WorkspaceFolders_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient_protocol creates a new instance of MockClient_protocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient_protocol(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient_protocol {
	mock := &MockClient_protocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
