// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	protocol "github.com/walteh/gotmpls/pkg/lsp/protocol"
)

// MockServer_protocol is an autogenerated mock type for the Server type
type MockServer_protocol struct {
	mock.Mock
}

type MockServer_protocol_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServer_protocol) EXPECT() *MockServer_protocol_Expecter {
	return &MockServer_protocol_Expecter{mock: &_m.Mock}
}

// CodeAction provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) CodeAction(_a0 context.Context, _a1 *protocol.CodeActionParams) ([]protocol.CodeAction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CodeAction")
	}

	var r0 []protocol.CodeAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeActionParams) ([]protocol.CodeAction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeActionParams) []protocol.CodeAction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.CodeAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CodeActionParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_CodeAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CodeAction'
type MockServer_protocol_CodeAction_Call struct {
	*mock.Call
}

// CodeAction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CodeActionParams
func (_e *MockServer_protocol_Expecter) CodeAction(_a0 interface{}, _a1 interface{}) *MockServer_protocol_CodeAction_Call {
	return &MockServer_protocol_CodeAction_Call{Call: _e.mock.On("CodeAction", _a0, _a1)}
}

func (_c *MockServer_protocol_CodeAction_Call) Run(run func(_a0 context.Context, _a1 *protocol.CodeActionParams)) *MockServer_protocol_CodeAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CodeActionParams))
	})
	return _c
}

func (_c *MockServer_protocol_CodeAction_Call) Return(_a0 []protocol.CodeAction, _a1 error) *MockServer_protocol_CodeAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_CodeAction_Call) RunAndReturn(run func(context.Context, *protocol.CodeActionParams) ([]protocol.CodeAction, error)) *MockServer_protocol_CodeAction_Call {
	_c.Call.Return(run)
	return _c
}

// CodeLens provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) CodeLens(_a0 context.Context, _a1 *protocol.CodeLensParams) ([]protocol.CodeLens, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CodeLens")
	}

	var r0 []protocol.CodeLens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeLensParams) ([]protocol.CodeLens, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeLensParams) []protocol.CodeLens); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.CodeLens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CodeLensParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_CodeLens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CodeLens'
type MockServer_protocol_CodeLens_Call struct {
	*mock.Call
}

// CodeLens is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CodeLensParams
func (_e *MockServer_protocol_Expecter) CodeLens(_a0 interface{}, _a1 interface{}) *MockServer_protocol_CodeLens_Call {
	return &MockServer_protocol_CodeLens_Call{Call: _e.mock.On("CodeLens", _a0, _a1)}
}

func (_c *MockServer_protocol_CodeLens_Call) Run(run func(_a0 context.Context, _a1 *protocol.CodeLensParams)) *MockServer_protocol_CodeLens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CodeLensParams))
	})
	return _c
}

func (_c *MockServer_protocol_CodeLens_Call) Return(_a0 []protocol.CodeLens, _a1 error) *MockServer_protocol_CodeLens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_CodeLens_Call) RunAndReturn(run func(context.Context, *protocol.CodeLensParams) ([]protocol.CodeLens, error)) *MockServer_protocol_CodeLens_Call {
	_c.Call.Return(run)
	return _c
}

// ColorPresentation provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ColorPresentation(_a0 context.Context, _a1 *protocol.ColorPresentationParams) ([]protocol.ColorPresentation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ColorPresentation")
	}

	var r0 []protocol.ColorPresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ColorPresentationParams) ([]protocol.ColorPresentation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ColorPresentationParams) []protocol.ColorPresentation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.ColorPresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ColorPresentationParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ColorPresentation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ColorPresentation'
type MockServer_protocol_ColorPresentation_Call struct {
	*mock.Call
}

// ColorPresentation is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ColorPresentationParams
func (_e *MockServer_protocol_Expecter) ColorPresentation(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ColorPresentation_Call {
	return &MockServer_protocol_ColorPresentation_Call{Call: _e.mock.On("ColorPresentation", _a0, _a1)}
}

func (_c *MockServer_protocol_ColorPresentation_Call) Run(run func(_a0 context.Context, _a1 *protocol.ColorPresentationParams)) *MockServer_protocol_ColorPresentation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ColorPresentationParams))
	})
	return _c
}

func (_c *MockServer_protocol_ColorPresentation_Call) Return(_a0 []protocol.ColorPresentation, _a1 error) *MockServer_protocol_ColorPresentation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ColorPresentation_Call) RunAndReturn(run func(context.Context, *protocol.ColorPresentationParams) ([]protocol.ColorPresentation, error)) *MockServer_protocol_ColorPresentation_Call {
	_c.Call.Return(run)
	return _c
}

// Completion provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Completion(_a0 context.Context, _a1 *protocol.CompletionParams) (*protocol.CompletionList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Completion")
	}

	var r0 *protocol.CompletionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CompletionParams) (*protocol.CompletionList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CompletionParams) *protocol.CompletionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CompletionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CompletionParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Completion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Completion'
type MockServer_protocol_Completion_Call struct {
	*mock.Call
}

// Completion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CompletionParams
func (_e *MockServer_protocol_Expecter) Completion(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Completion_Call {
	return &MockServer_protocol_Completion_Call{Call: _e.mock.On("Completion", _a0, _a1)}
}

func (_c *MockServer_protocol_Completion_Call) Run(run func(_a0 context.Context, _a1 *protocol.CompletionParams)) *MockServer_protocol_Completion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CompletionParams))
	})
	return _c
}

func (_c *MockServer_protocol_Completion_Call) Return(_a0 *protocol.CompletionList, _a1 error) *MockServer_protocol_Completion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Completion_Call) RunAndReturn(run func(context.Context, *protocol.CompletionParams) (*protocol.CompletionList, error)) *MockServer_protocol_Completion_Call {
	_c.Call.Return(run)
	return _c
}

// Declaration provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Declaration(_a0 context.Context, _a1 *protocol.DeclarationParams) (*protocol.Or_textDocument_declaration, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Declaration")
	}

	var r0 *protocol.Or_textDocument_declaration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeclarationParams) (*protocol.Or_textDocument_declaration, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeclarationParams) *protocol.Or_textDocument_declaration); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.Or_textDocument_declaration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DeclarationParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Declaration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Declaration'
type MockServer_protocol_Declaration_Call struct {
	*mock.Call
}

// Declaration is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DeclarationParams
func (_e *MockServer_protocol_Expecter) Declaration(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Declaration_Call {
	return &MockServer_protocol_Declaration_Call{Call: _e.mock.On("Declaration", _a0, _a1)}
}

func (_c *MockServer_protocol_Declaration_Call) Run(run func(_a0 context.Context, _a1 *protocol.DeclarationParams)) *MockServer_protocol_Declaration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DeclarationParams))
	})
	return _c
}

func (_c *MockServer_protocol_Declaration_Call) Return(_a0 *protocol.Or_textDocument_declaration, _a1 error) *MockServer_protocol_Declaration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Declaration_Call) RunAndReturn(run func(context.Context, *protocol.DeclarationParams) (*protocol.Or_textDocument_declaration, error)) *MockServer_protocol_Declaration_Call {
	_c.Call.Return(run)
	return _c
}

// Definition provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Definition(_a0 context.Context, _a1 *protocol.DefinitionParams) ([]protocol.Location, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Definition")
	}

	var r0 []protocol.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DefinitionParams) ([]protocol.Location, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DefinitionParams) []protocol.Location); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DefinitionParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Definition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Definition'
type MockServer_protocol_Definition_Call struct {
	*mock.Call
}

// Definition is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DefinitionParams
func (_e *MockServer_protocol_Expecter) Definition(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Definition_Call {
	return &MockServer_protocol_Definition_Call{Call: _e.mock.On("Definition", _a0, _a1)}
}

func (_c *MockServer_protocol_Definition_Call) Run(run func(_a0 context.Context, _a1 *protocol.DefinitionParams)) *MockServer_protocol_Definition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DefinitionParams))
	})
	return _c
}

func (_c *MockServer_protocol_Definition_Call) Return(_a0 []protocol.Location, _a1 error) *MockServer_protocol_Definition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Definition_Call) RunAndReturn(run func(context.Context, *protocol.DefinitionParams) ([]protocol.Location, error)) *MockServer_protocol_Definition_Call {
	_c.Call.Return(run)
	return _c
}

// Diagnostic provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Diagnostic(_a0 context.Context, _a1 *protocol.DocumentDiagnosticParams) (*protocol.DocumentDiagnosticReport, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Diagnostic")
	}

	var r0 *protocol.DocumentDiagnosticReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentDiagnosticParams) (*protocol.DocumentDiagnosticReport, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentDiagnosticParams) *protocol.DocumentDiagnosticReport); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.DocumentDiagnosticReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentDiagnosticParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Diagnostic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Diagnostic'
type MockServer_protocol_Diagnostic_Call struct {
	*mock.Call
}

// Diagnostic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentDiagnosticParams
func (_e *MockServer_protocol_Expecter) Diagnostic(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Diagnostic_Call {
	return &MockServer_protocol_Diagnostic_Call{Call: _e.mock.On("Diagnostic", _a0, _a1)}
}

func (_c *MockServer_protocol_Diagnostic_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentDiagnosticParams)) *MockServer_protocol_Diagnostic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentDiagnosticParams))
	})
	return _c
}

func (_c *MockServer_protocol_Diagnostic_Call) Return(_a0 *protocol.DocumentDiagnosticReport, _a1 error) *MockServer_protocol_Diagnostic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Diagnostic_Call) RunAndReturn(run func(context.Context, *protocol.DocumentDiagnosticParams) (*protocol.DocumentDiagnosticReport, error)) *MockServer_protocol_Diagnostic_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticWorkspace provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DiagnosticWorkspace(_a0 context.Context, _a1 *protocol.WorkspaceDiagnosticParams) (*protocol.WorkspaceDiagnosticReport, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticWorkspace")
	}

	var r0 *protocol.WorkspaceDiagnosticReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkspaceDiagnosticParams) (*protocol.WorkspaceDiagnosticReport, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkspaceDiagnosticParams) *protocol.WorkspaceDiagnosticReport); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.WorkspaceDiagnosticReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.WorkspaceDiagnosticParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_DiagnosticWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticWorkspace'
type MockServer_protocol_DiagnosticWorkspace_Call struct {
	*mock.Call
}

// DiagnosticWorkspace is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WorkspaceDiagnosticParams
func (_e *MockServer_protocol_Expecter) DiagnosticWorkspace(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DiagnosticWorkspace_Call {
	return &MockServer_protocol_DiagnosticWorkspace_Call{Call: _e.mock.On("DiagnosticWorkspace", _a0, _a1)}
}

func (_c *MockServer_protocol_DiagnosticWorkspace_Call) Run(run func(_a0 context.Context, _a1 *protocol.WorkspaceDiagnosticParams)) *MockServer_protocol_DiagnosticWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WorkspaceDiagnosticParams))
	})
	return _c
}

func (_c *MockServer_protocol_DiagnosticWorkspace_Call) Return(_a0 *protocol.WorkspaceDiagnosticReport, _a1 error) *MockServer_protocol_DiagnosticWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_DiagnosticWorkspace_Call) RunAndReturn(run func(context.Context, *protocol.WorkspaceDiagnosticParams) (*protocol.WorkspaceDiagnosticReport, error)) *MockServer_protocol_DiagnosticWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// DidChange provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidChange(_a0 context.Context, _a1 *protocol.DidChangeTextDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidChangeTextDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidChange'
type MockServer_protocol_DidChange_Call struct {
	*mock.Call
}

// DidChange is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidChangeTextDocumentParams
func (_e *MockServer_protocol_Expecter) DidChange(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidChange_Call {
	return &MockServer_protocol_DidChange_Call{Call: _e.mock.On("DidChange", _a0, _a1)}
}

func (_c *MockServer_protocol_DidChange_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidChangeTextDocumentParams)) *MockServer_protocol_DidChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidChangeTextDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidChange_Call) Return(_a0 error) *MockServer_protocol_DidChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidChange_Call) RunAndReturn(run func(context.Context, *protocol.DidChangeTextDocumentParams) error) *MockServer_protocol_DidChange_Call {
	_c.Call.Return(run)
	return _c
}

// DidChangeConfiguration provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidChangeConfiguration(_a0 context.Context, _a1 *protocol.DidChangeConfigurationParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidChangeConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidChangeConfigurationParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidChangeConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidChangeConfiguration'
type MockServer_protocol_DidChangeConfiguration_Call struct {
	*mock.Call
}

// DidChangeConfiguration is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidChangeConfigurationParams
func (_e *MockServer_protocol_Expecter) DidChangeConfiguration(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidChangeConfiguration_Call {
	return &MockServer_protocol_DidChangeConfiguration_Call{Call: _e.mock.On("DidChangeConfiguration", _a0, _a1)}
}

func (_c *MockServer_protocol_DidChangeConfiguration_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidChangeConfigurationParams)) *MockServer_protocol_DidChangeConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidChangeConfigurationParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidChangeConfiguration_Call) Return(_a0 error) *MockServer_protocol_DidChangeConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidChangeConfiguration_Call) RunAndReturn(run func(context.Context, *protocol.DidChangeConfigurationParams) error) *MockServer_protocol_DidChangeConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DidChangeNotebookDocument provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidChangeNotebookDocument(_a0 context.Context, _a1 *protocol.DidChangeNotebookDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidChangeNotebookDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidChangeNotebookDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidChangeNotebookDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidChangeNotebookDocument'
type MockServer_protocol_DidChangeNotebookDocument_Call struct {
	*mock.Call
}

// DidChangeNotebookDocument is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidChangeNotebookDocumentParams
func (_e *MockServer_protocol_Expecter) DidChangeNotebookDocument(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidChangeNotebookDocument_Call {
	return &MockServer_protocol_DidChangeNotebookDocument_Call{Call: _e.mock.On("DidChangeNotebookDocument", _a0, _a1)}
}

func (_c *MockServer_protocol_DidChangeNotebookDocument_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidChangeNotebookDocumentParams)) *MockServer_protocol_DidChangeNotebookDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidChangeNotebookDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidChangeNotebookDocument_Call) Return(_a0 error) *MockServer_protocol_DidChangeNotebookDocument_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidChangeNotebookDocument_Call) RunAndReturn(run func(context.Context, *protocol.DidChangeNotebookDocumentParams) error) *MockServer_protocol_DidChangeNotebookDocument_Call {
	_c.Call.Return(run)
	return _c
}

// DidChangeWatchedFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidChangeWatchedFiles(_a0 context.Context, _a1 *protocol.DidChangeWatchedFilesParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidChangeWatchedFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidChangeWatchedFilesParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidChangeWatchedFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidChangeWatchedFiles'
type MockServer_protocol_DidChangeWatchedFiles_Call struct {
	*mock.Call
}

// DidChangeWatchedFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidChangeWatchedFilesParams
func (_e *MockServer_protocol_Expecter) DidChangeWatchedFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidChangeWatchedFiles_Call {
	return &MockServer_protocol_DidChangeWatchedFiles_Call{Call: _e.mock.On("DidChangeWatchedFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_DidChangeWatchedFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidChangeWatchedFilesParams)) *MockServer_protocol_DidChangeWatchedFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidChangeWatchedFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidChangeWatchedFiles_Call) Return(_a0 error) *MockServer_protocol_DidChangeWatchedFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidChangeWatchedFiles_Call) RunAndReturn(run func(context.Context, *protocol.DidChangeWatchedFilesParams) error) *MockServer_protocol_DidChangeWatchedFiles_Call {
	_c.Call.Return(run)
	return _c
}

// DidChangeWorkspaceFolders provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidChangeWorkspaceFolders(_a0 context.Context, _a1 *protocol.DidChangeWorkspaceFoldersParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidChangeWorkspaceFolders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidChangeWorkspaceFoldersParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidChangeWorkspaceFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidChangeWorkspaceFolders'
type MockServer_protocol_DidChangeWorkspaceFolders_Call struct {
	*mock.Call
}

// DidChangeWorkspaceFolders is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidChangeWorkspaceFoldersParams
func (_e *MockServer_protocol_Expecter) DidChangeWorkspaceFolders(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidChangeWorkspaceFolders_Call {
	return &MockServer_protocol_DidChangeWorkspaceFolders_Call{Call: _e.mock.On("DidChangeWorkspaceFolders", _a0, _a1)}
}

func (_c *MockServer_protocol_DidChangeWorkspaceFolders_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidChangeWorkspaceFoldersParams)) *MockServer_protocol_DidChangeWorkspaceFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidChangeWorkspaceFoldersParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidChangeWorkspaceFolders_Call) Return(_a0 error) *MockServer_protocol_DidChangeWorkspaceFolders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidChangeWorkspaceFolders_Call) RunAndReturn(run func(context.Context, *protocol.DidChangeWorkspaceFoldersParams) error) *MockServer_protocol_DidChangeWorkspaceFolders_Call {
	_c.Call.Return(run)
	return _c
}

// DidClose provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidClose(_a0 context.Context, _a1 *protocol.DidCloseTextDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidClose")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidCloseTextDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidClose'
type MockServer_protocol_DidClose_Call struct {
	*mock.Call
}

// DidClose is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidCloseTextDocumentParams
func (_e *MockServer_protocol_Expecter) DidClose(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidClose_Call {
	return &MockServer_protocol_DidClose_Call{Call: _e.mock.On("DidClose", _a0, _a1)}
}

func (_c *MockServer_protocol_DidClose_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidCloseTextDocumentParams)) *MockServer_protocol_DidClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidCloseTextDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidClose_Call) Return(_a0 error) *MockServer_protocol_DidClose_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidClose_Call) RunAndReturn(run func(context.Context, *protocol.DidCloseTextDocumentParams) error) *MockServer_protocol_DidClose_Call {
	_c.Call.Return(run)
	return _c
}

// DidCloseNotebookDocument provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidCloseNotebookDocument(_a0 context.Context, _a1 *protocol.DidCloseNotebookDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidCloseNotebookDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidCloseNotebookDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidCloseNotebookDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidCloseNotebookDocument'
type MockServer_protocol_DidCloseNotebookDocument_Call struct {
	*mock.Call
}

// DidCloseNotebookDocument is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidCloseNotebookDocumentParams
func (_e *MockServer_protocol_Expecter) DidCloseNotebookDocument(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidCloseNotebookDocument_Call {
	return &MockServer_protocol_DidCloseNotebookDocument_Call{Call: _e.mock.On("DidCloseNotebookDocument", _a0, _a1)}
}

func (_c *MockServer_protocol_DidCloseNotebookDocument_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidCloseNotebookDocumentParams)) *MockServer_protocol_DidCloseNotebookDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidCloseNotebookDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidCloseNotebookDocument_Call) Return(_a0 error) *MockServer_protocol_DidCloseNotebookDocument_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidCloseNotebookDocument_Call) RunAndReturn(run func(context.Context, *protocol.DidCloseNotebookDocumentParams) error) *MockServer_protocol_DidCloseNotebookDocument_Call {
	_c.Call.Return(run)
	return _c
}

// DidCreateFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidCreateFiles(_a0 context.Context, _a1 *protocol.CreateFilesParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidCreateFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CreateFilesParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidCreateFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidCreateFiles'
type MockServer_protocol_DidCreateFiles_Call struct {
	*mock.Call
}

// DidCreateFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CreateFilesParams
func (_e *MockServer_protocol_Expecter) DidCreateFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidCreateFiles_Call {
	return &MockServer_protocol_DidCreateFiles_Call{Call: _e.mock.On("DidCreateFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_DidCreateFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.CreateFilesParams)) *MockServer_protocol_DidCreateFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CreateFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidCreateFiles_Call) Return(_a0 error) *MockServer_protocol_DidCreateFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidCreateFiles_Call) RunAndReturn(run func(context.Context, *protocol.CreateFilesParams) error) *MockServer_protocol_DidCreateFiles_Call {
	_c.Call.Return(run)
	return _c
}

// DidDeleteFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidDeleteFiles(_a0 context.Context, _a1 *protocol.DeleteFilesParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidDeleteFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeleteFilesParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidDeleteFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidDeleteFiles'
type MockServer_protocol_DidDeleteFiles_Call struct {
	*mock.Call
}

// DidDeleteFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DeleteFilesParams
func (_e *MockServer_protocol_Expecter) DidDeleteFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidDeleteFiles_Call {
	return &MockServer_protocol_DidDeleteFiles_Call{Call: _e.mock.On("DidDeleteFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_DidDeleteFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.DeleteFilesParams)) *MockServer_protocol_DidDeleteFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DeleteFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidDeleteFiles_Call) Return(_a0 error) *MockServer_protocol_DidDeleteFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidDeleteFiles_Call) RunAndReturn(run func(context.Context, *protocol.DeleteFilesParams) error) *MockServer_protocol_DidDeleteFiles_Call {
	_c.Call.Return(run)
	return _c
}

// DidOpen provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidOpen(_a0 context.Context, _a1 *protocol.DidOpenTextDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidOpen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidOpenTextDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidOpen'
type MockServer_protocol_DidOpen_Call struct {
	*mock.Call
}

// DidOpen is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidOpenTextDocumentParams
func (_e *MockServer_protocol_Expecter) DidOpen(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidOpen_Call {
	return &MockServer_protocol_DidOpen_Call{Call: _e.mock.On("DidOpen", _a0, _a1)}
}

func (_c *MockServer_protocol_DidOpen_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidOpenTextDocumentParams)) *MockServer_protocol_DidOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidOpenTextDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidOpen_Call) Return(_a0 error) *MockServer_protocol_DidOpen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidOpen_Call) RunAndReturn(run func(context.Context, *protocol.DidOpenTextDocumentParams) error) *MockServer_protocol_DidOpen_Call {
	_c.Call.Return(run)
	return _c
}

// DidOpenNotebookDocument provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidOpenNotebookDocument(_a0 context.Context, _a1 *protocol.DidOpenNotebookDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidOpenNotebookDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidOpenNotebookDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidOpenNotebookDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidOpenNotebookDocument'
type MockServer_protocol_DidOpenNotebookDocument_Call struct {
	*mock.Call
}

// DidOpenNotebookDocument is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidOpenNotebookDocumentParams
func (_e *MockServer_protocol_Expecter) DidOpenNotebookDocument(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidOpenNotebookDocument_Call {
	return &MockServer_protocol_DidOpenNotebookDocument_Call{Call: _e.mock.On("DidOpenNotebookDocument", _a0, _a1)}
}

func (_c *MockServer_protocol_DidOpenNotebookDocument_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidOpenNotebookDocumentParams)) *MockServer_protocol_DidOpenNotebookDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidOpenNotebookDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidOpenNotebookDocument_Call) Return(_a0 error) *MockServer_protocol_DidOpenNotebookDocument_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidOpenNotebookDocument_Call) RunAndReturn(run func(context.Context, *protocol.DidOpenNotebookDocumentParams) error) *MockServer_protocol_DidOpenNotebookDocument_Call {
	_c.Call.Return(run)
	return _c
}

// DidRenameFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidRenameFiles(_a0 context.Context, _a1 *protocol.RenameFilesParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidRenameFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RenameFilesParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidRenameFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidRenameFiles'
type MockServer_protocol_DidRenameFiles_Call struct {
	*mock.Call
}

// DidRenameFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.RenameFilesParams
func (_e *MockServer_protocol_Expecter) DidRenameFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidRenameFiles_Call {
	return &MockServer_protocol_DidRenameFiles_Call{Call: _e.mock.On("DidRenameFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_DidRenameFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.RenameFilesParams)) *MockServer_protocol_DidRenameFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.RenameFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidRenameFiles_Call) Return(_a0 error) *MockServer_protocol_DidRenameFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidRenameFiles_Call) RunAndReturn(run func(context.Context, *protocol.RenameFilesParams) error) *MockServer_protocol_DidRenameFiles_Call {
	_c.Call.Return(run)
	return _c
}

// DidSave provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidSave(_a0 context.Context, _a1 *protocol.DidSaveTextDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidSaveTextDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidSave'
type MockServer_protocol_DidSave_Call struct {
	*mock.Call
}

// DidSave is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidSaveTextDocumentParams
func (_e *MockServer_protocol_Expecter) DidSave(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidSave_Call {
	return &MockServer_protocol_DidSave_Call{Call: _e.mock.On("DidSave", _a0, _a1)}
}

func (_c *MockServer_protocol_DidSave_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidSaveTextDocumentParams)) *MockServer_protocol_DidSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidSaveTextDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidSave_Call) Return(_a0 error) *MockServer_protocol_DidSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidSave_Call) RunAndReturn(run func(context.Context, *protocol.DidSaveTextDocumentParams) error) *MockServer_protocol_DidSave_Call {
	_c.Call.Return(run)
	return _c
}

// DidSaveNotebookDocument provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DidSaveNotebookDocument(_a0 context.Context, _a1 *protocol.DidSaveNotebookDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DidSaveNotebookDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DidSaveNotebookDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_DidSaveNotebookDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DidSaveNotebookDocument'
type MockServer_protocol_DidSaveNotebookDocument_Call struct {
	*mock.Call
}

// DidSaveNotebookDocument is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DidSaveNotebookDocumentParams
func (_e *MockServer_protocol_Expecter) DidSaveNotebookDocument(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DidSaveNotebookDocument_Call {
	return &MockServer_protocol_DidSaveNotebookDocument_Call{Call: _e.mock.On("DidSaveNotebookDocument", _a0, _a1)}
}

func (_c *MockServer_protocol_DidSaveNotebookDocument_Call) Run(run func(_a0 context.Context, _a1 *protocol.DidSaveNotebookDocumentParams)) *MockServer_protocol_DidSaveNotebookDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DidSaveNotebookDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_DidSaveNotebookDocument_Call) Return(_a0 error) *MockServer_protocol_DidSaveNotebookDocument_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_DidSaveNotebookDocument_Call) RunAndReturn(run func(context.Context, *protocol.DidSaveNotebookDocumentParams) error) *MockServer_protocol_DidSaveNotebookDocument_Call {
	_c.Call.Return(run)
	return _c
}

// DocumentColor provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DocumentColor(_a0 context.Context, _a1 *protocol.DocumentColorParams) ([]protocol.ColorInformation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DocumentColor")
	}

	var r0 []protocol.ColorInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentColorParams) ([]protocol.ColorInformation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentColorParams) []protocol.ColorInformation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.ColorInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentColorParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_DocumentColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DocumentColor'
type MockServer_protocol_DocumentColor_Call struct {
	*mock.Call
}

// DocumentColor is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentColorParams
func (_e *MockServer_protocol_Expecter) DocumentColor(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DocumentColor_Call {
	return &MockServer_protocol_DocumentColor_Call{Call: _e.mock.On("DocumentColor", _a0, _a1)}
}

func (_c *MockServer_protocol_DocumentColor_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentColorParams)) *MockServer_protocol_DocumentColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentColorParams))
	})
	return _c
}

func (_c *MockServer_protocol_DocumentColor_Call) Return(_a0 []protocol.ColorInformation, _a1 error) *MockServer_protocol_DocumentColor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_DocumentColor_Call) RunAndReturn(run func(context.Context, *protocol.DocumentColorParams) ([]protocol.ColorInformation, error)) *MockServer_protocol_DocumentColor_Call {
	_c.Call.Return(run)
	return _c
}

// DocumentHighlight provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DocumentHighlight(_a0 context.Context, _a1 *protocol.DocumentHighlightParams) ([]protocol.DocumentHighlight, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DocumentHighlight")
	}

	var r0 []protocol.DocumentHighlight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentHighlightParams) ([]protocol.DocumentHighlight, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentHighlightParams) []protocol.DocumentHighlight); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.DocumentHighlight)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentHighlightParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_DocumentHighlight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DocumentHighlight'
type MockServer_protocol_DocumentHighlight_Call struct {
	*mock.Call
}

// DocumentHighlight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentHighlightParams
func (_e *MockServer_protocol_Expecter) DocumentHighlight(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DocumentHighlight_Call {
	return &MockServer_protocol_DocumentHighlight_Call{Call: _e.mock.On("DocumentHighlight", _a0, _a1)}
}

func (_c *MockServer_protocol_DocumentHighlight_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentHighlightParams)) *MockServer_protocol_DocumentHighlight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentHighlightParams))
	})
	return _c
}

func (_c *MockServer_protocol_DocumentHighlight_Call) Return(_a0 []protocol.DocumentHighlight, _a1 error) *MockServer_protocol_DocumentHighlight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_DocumentHighlight_Call) RunAndReturn(run func(context.Context, *protocol.DocumentHighlightParams) ([]protocol.DocumentHighlight, error)) *MockServer_protocol_DocumentHighlight_Call {
	_c.Call.Return(run)
	return _c
}

// DocumentLink provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DocumentLink(_a0 context.Context, _a1 *protocol.DocumentLinkParams) ([]protocol.DocumentLink, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DocumentLink")
	}

	var r0 []protocol.DocumentLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentLinkParams) ([]protocol.DocumentLink, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentLinkParams) []protocol.DocumentLink); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.DocumentLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentLinkParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_DocumentLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DocumentLink'
type MockServer_protocol_DocumentLink_Call struct {
	*mock.Call
}

// DocumentLink is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentLinkParams
func (_e *MockServer_protocol_Expecter) DocumentLink(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DocumentLink_Call {
	return &MockServer_protocol_DocumentLink_Call{Call: _e.mock.On("DocumentLink", _a0, _a1)}
}

func (_c *MockServer_protocol_DocumentLink_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentLinkParams)) *MockServer_protocol_DocumentLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentLinkParams))
	})
	return _c
}

func (_c *MockServer_protocol_DocumentLink_Call) Return(_a0 []protocol.DocumentLink, _a1 error) *MockServer_protocol_DocumentLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_DocumentLink_Call) RunAndReturn(run func(context.Context, *protocol.DocumentLinkParams) ([]protocol.DocumentLink, error)) *MockServer_protocol_DocumentLink_Call {
	_c.Call.Return(run)
	return _c
}

// DocumentSymbol provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) DocumentSymbol(_a0 context.Context, _a1 *protocol.DocumentSymbolParams) ([]any, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DocumentSymbol")
	}

	var r0 []any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentSymbolParams) ([]any, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentSymbolParams) []any); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentSymbolParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_DocumentSymbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DocumentSymbol'
type MockServer_protocol_DocumentSymbol_Call struct {
	*mock.Call
}

// DocumentSymbol is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentSymbolParams
func (_e *MockServer_protocol_Expecter) DocumentSymbol(_a0 interface{}, _a1 interface{}) *MockServer_protocol_DocumentSymbol_Call {
	return &MockServer_protocol_DocumentSymbol_Call{Call: _e.mock.On("DocumentSymbol", _a0, _a1)}
}

func (_c *MockServer_protocol_DocumentSymbol_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentSymbolParams)) *MockServer_protocol_DocumentSymbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentSymbolParams))
	})
	return _c
}

func (_c *MockServer_protocol_DocumentSymbol_Call) Return(_a0 []any, _a1 error) *MockServer_protocol_DocumentSymbol_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_DocumentSymbol_Call) RunAndReturn(run func(context.Context, *protocol.DocumentSymbolParams) ([]any, error)) *MockServer_protocol_DocumentSymbol_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteCommand provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ExecuteCommand(_a0 context.Context, _a1 *protocol.ExecuteCommandParams) (any, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ExecuteCommandParams) (any, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ExecuteCommandParams) any); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ExecuteCommandParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommand'
type MockServer_protocol_ExecuteCommand_Call struct {
	*mock.Call
}

// ExecuteCommand is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ExecuteCommandParams
func (_e *MockServer_protocol_Expecter) ExecuteCommand(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ExecuteCommand_Call {
	return &MockServer_protocol_ExecuteCommand_Call{Call: _e.mock.On("ExecuteCommand", _a0, _a1)}
}

func (_c *MockServer_protocol_ExecuteCommand_Call) Run(run func(_a0 context.Context, _a1 *protocol.ExecuteCommandParams)) *MockServer_protocol_ExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ExecuteCommandParams))
	})
	return _c
}

func (_c *MockServer_protocol_ExecuteCommand_Call) Return(_a0 any, _a1 error) *MockServer_protocol_ExecuteCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ExecuteCommand_Call) RunAndReturn(run func(context.Context, *protocol.ExecuteCommandParams) (any, error)) *MockServer_protocol_ExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}

// Exit provides a mock function with given fields: _a0
func (_m *MockServer_protocol) Exit(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Exit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_Exit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exit'
type MockServer_protocol_Exit_Call struct {
	*mock.Call
}

// Exit is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockServer_protocol_Expecter) Exit(_a0 interface{}) *MockServer_protocol_Exit_Call {
	return &MockServer_protocol_Exit_Call{Call: _e.mock.On("Exit", _a0)}
}

func (_c *MockServer_protocol_Exit_Call) Run(run func(_a0 context.Context)) *MockServer_protocol_Exit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServer_protocol_Exit_Call) Return(_a0 error) *MockServer_protocol_Exit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_Exit_Call) RunAndReturn(run func(context.Context) error) *MockServer_protocol_Exit_Call {
	_c.Call.Return(run)
	return _c
}

// FoldingRange provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) FoldingRange(_a0 context.Context, _a1 *protocol.FoldingRangeParams) ([]protocol.FoldingRange, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FoldingRange")
	}

	var r0 []protocol.FoldingRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.FoldingRangeParams) ([]protocol.FoldingRange, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.FoldingRangeParams) []protocol.FoldingRange); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.FoldingRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.FoldingRangeParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_FoldingRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FoldingRange'
type MockServer_protocol_FoldingRange_Call struct {
	*mock.Call
}

// FoldingRange is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.FoldingRangeParams
func (_e *MockServer_protocol_Expecter) FoldingRange(_a0 interface{}, _a1 interface{}) *MockServer_protocol_FoldingRange_Call {
	return &MockServer_protocol_FoldingRange_Call{Call: _e.mock.On("FoldingRange", _a0, _a1)}
}

func (_c *MockServer_protocol_FoldingRange_Call) Run(run func(_a0 context.Context, _a1 *protocol.FoldingRangeParams)) *MockServer_protocol_FoldingRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.FoldingRangeParams))
	})
	return _c
}

func (_c *MockServer_protocol_FoldingRange_Call) Return(_a0 []protocol.FoldingRange, _a1 error) *MockServer_protocol_FoldingRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_FoldingRange_Call) RunAndReturn(run func(context.Context, *protocol.FoldingRangeParams) ([]protocol.FoldingRange, error)) *MockServer_protocol_FoldingRange_Call {
	_c.Call.Return(run)
	return _c
}

// Formatting provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Formatting(_a0 context.Context, _a1 *protocol.DocumentFormattingParams) ([]protocol.TextEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Formatting")
	}

	var r0 []protocol.TextEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentFormattingParams) ([]protocol.TextEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentFormattingParams) []protocol.TextEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TextEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentFormattingParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Formatting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Formatting'
type MockServer_protocol_Formatting_Call struct {
	*mock.Call
}

// Formatting is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentFormattingParams
func (_e *MockServer_protocol_Expecter) Formatting(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Formatting_Call {
	return &MockServer_protocol_Formatting_Call{Call: _e.mock.On("Formatting", _a0, _a1)}
}

func (_c *MockServer_protocol_Formatting_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentFormattingParams)) *MockServer_protocol_Formatting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentFormattingParams))
	})
	return _c
}

func (_c *MockServer_protocol_Formatting_Call) Return(_a0 []protocol.TextEdit, _a1 error) *MockServer_protocol_Formatting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Formatting_Call) RunAndReturn(run func(context.Context, *protocol.DocumentFormattingParams) ([]protocol.TextEdit, error)) *MockServer_protocol_Formatting_Call {
	_c.Call.Return(run)
	return _c
}

// Hover provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Hover(_a0 context.Context, _a1 *protocol.HoverParams) (*protocol.Hover, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Hover")
	}

	var r0 *protocol.Hover
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.HoverParams) (*protocol.Hover, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.HoverParams) *protocol.Hover); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.Hover)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.HoverParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Hover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hover'
type MockServer_protocol_Hover_Call struct {
	*mock.Call
}

// Hover is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.HoverParams
func (_e *MockServer_protocol_Expecter) Hover(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Hover_Call {
	return &MockServer_protocol_Hover_Call{Call: _e.mock.On("Hover", _a0, _a1)}
}

func (_c *MockServer_protocol_Hover_Call) Run(run func(_a0 context.Context, _a1 *protocol.HoverParams)) *MockServer_protocol_Hover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.HoverParams))
	})
	return _c
}

func (_c *MockServer_protocol_Hover_Call) Return(_a0 *protocol.Hover, _a1 error) *MockServer_protocol_Hover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Hover_Call) RunAndReturn(run func(context.Context, *protocol.HoverParams) (*protocol.Hover, error)) *MockServer_protocol_Hover_Call {
	_c.Call.Return(run)
	return _c
}

// Implementation provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Implementation(_a0 context.Context, _a1 *protocol.ImplementationParams) ([]protocol.Location, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Implementation")
	}

	var r0 []protocol.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ImplementationParams) ([]protocol.Location, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ImplementationParams) []protocol.Location); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ImplementationParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Implementation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Implementation'
type MockServer_protocol_Implementation_Call struct {
	*mock.Call
}

// Implementation is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ImplementationParams
func (_e *MockServer_protocol_Expecter) Implementation(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Implementation_Call {
	return &MockServer_protocol_Implementation_Call{Call: _e.mock.On("Implementation", _a0, _a1)}
}

func (_c *MockServer_protocol_Implementation_Call) Run(run func(_a0 context.Context, _a1 *protocol.ImplementationParams)) *MockServer_protocol_Implementation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ImplementationParams))
	})
	return _c
}

func (_c *MockServer_protocol_Implementation_Call) Return(_a0 []protocol.Location, _a1 error) *MockServer_protocol_Implementation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Implementation_Call) RunAndReturn(run func(context.Context, *protocol.ImplementationParams) ([]protocol.Location, error)) *MockServer_protocol_Implementation_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingCalls provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) IncomingCalls(_a0 context.Context, _a1 *protocol.CallHierarchyIncomingCallsParams) ([]protocol.CallHierarchyIncomingCall, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IncomingCalls")
	}

	var r0 []protocol.CallHierarchyIncomingCall
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CallHierarchyIncomingCallsParams) ([]protocol.CallHierarchyIncomingCall, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CallHierarchyIncomingCallsParams) []protocol.CallHierarchyIncomingCall); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.CallHierarchyIncomingCall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CallHierarchyIncomingCallsParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_IncomingCalls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingCalls'
type MockServer_protocol_IncomingCalls_Call struct {
	*mock.Call
}

// IncomingCalls is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CallHierarchyIncomingCallsParams
func (_e *MockServer_protocol_Expecter) IncomingCalls(_a0 interface{}, _a1 interface{}) *MockServer_protocol_IncomingCalls_Call {
	return &MockServer_protocol_IncomingCalls_Call{Call: _e.mock.On("IncomingCalls", _a0, _a1)}
}

func (_c *MockServer_protocol_IncomingCalls_Call) Run(run func(_a0 context.Context, _a1 *protocol.CallHierarchyIncomingCallsParams)) *MockServer_protocol_IncomingCalls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CallHierarchyIncomingCallsParams))
	})
	return _c
}

func (_c *MockServer_protocol_IncomingCalls_Call) Return(_a0 []protocol.CallHierarchyIncomingCall, _a1 error) *MockServer_protocol_IncomingCalls_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_IncomingCalls_Call) RunAndReturn(run func(context.Context, *protocol.CallHierarchyIncomingCallsParams) ([]protocol.CallHierarchyIncomingCall, error)) *MockServer_protocol_IncomingCalls_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Initialize(_a0 context.Context, _a1 *protocol.ParamInitialize) (*protocol.InitializeResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 *protocol.InitializeResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ParamInitialize) (*protocol.InitializeResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ParamInitialize) *protocol.InitializeResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.InitializeResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ParamInitialize) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockServer_protocol_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ParamInitialize
func (_e *MockServer_protocol_Expecter) Initialize(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Initialize_Call {
	return &MockServer_protocol_Initialize_Call{Call: _e.mock.On("Initialize", _a0, _a1)}
}

func (_c *MockServer_protocol_Initialize_Call) Run(run func(_a0 context.Context, _a1 *protocol.ParamInitialize)) *MockServer_protocol_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ParamInitialize))
	})
	return _c
}

func (_c *MockServer_protocol_Initialize_Call) Return(_a0 *protocol.InitializeResult, _a1 error) *MockServer_protocol_Initialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Initialize_Call) RunAndReturn(run func(context.Context, *protocol.ParamInitialize) (*protocol.InitializeResult, error)) *MockServer_protocol_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Initialized(_a0 context.Context, _a1 *protocol.InitializedParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InitializedParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockServer_protocol_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.InitializedParams
func (_e *MockServer_protocol_Expecter) Initialized(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Initialized_Call {
	return &MockServer_protocol_Initialized_Call{Call: _e.mock.On("Initialized", _a0, _a1)}
}

func (_c *MockServer_protocol_Initialized_Call) Run(run func(_a0 context.Context, _a1 *protocol.InitializedParams)) *MockServer_protocol_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.InitializedParams))
	})
	return _c
}

func (_c *MockServer_protocol_Initialized_Call) Return(_a0 error) *MockServer_protocol_Initialized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_Initialized_Call) RunAndReturn(run func(context.Context, *protocol.InitializedParams) error) *MockServer_protocol_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// InlayHint provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) InlayHint(_a0 context.Context, _a1 *protocol.InlayHintParams) ([]protocol.InlayHint, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InlayHint")
	}

	var r0 []protocol.InlayHint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlayHintParams) ([]protocol.InlayHint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlayHintParams) []protocol.InlayHint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.InlayHint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.InlayHintParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_InlayHint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InlayHint'
type MockServer_protocol_InlayHint_Call struct {
	*mock.Call
}

// InlayHint is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.InlayHintParams
func (_e *MockServer_protocol_Expecter) InlayHint(_a0 interface{}, _a1 interface{}) *MockServer_protocol_InlayHint_Call {
	return &MockServer_protocol_InlayHint_Call{Call: _e.mock.On("InlayHint", _a0, _a1)}
}

func (_c *MockServer_protocol_InlayHint_Call) Run(run func(_a0 context.Context, _a1 *protocol.InlayHintParams)) *MockServer_protocol_InlayHint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.InlayHintParams))
	})
	return _c
}

func (_c *MockServer_protocol_InlayHint_Call) Return(_a0 []protocol.InlayHint, _a1 error) *MockServer_protocol_InlayHint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_InlayHint_Call) RunAndReturn(run func(context.Context, *protocol.InlayHintParams) ([]protocol.InlayHint, error)) *MockServer_protocol_InlayHint_Call {
	_c.Call.Return(run)
	return _c
}

// InlineCompletion provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) InlineCompletion(_a0 context.Context, _a1 *protocol.InlineCompletionParams) (*protocol.Or_Result_textDocument_inlineCompletion, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InlineCompletion")
	}

	var r0 *protocol.Or_Result_textDocument_inlineCompletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlineCompletionParams) (*protocol.Or_Result_textDocument_inlineCompletion, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlineCompletionParams) *protocol.Or_Result_textDocument_inlineCompletion); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.Or_Result_textDocument_inlineCompletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.InlineCompletionParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_InlineCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InlineCompletion'
type MockServer_protocol_InlineCompletion_Call struct {
	*mock.Call
}

// InlineCompletion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.InlineCompletionParams
func (_e *MockServer_protocol_Expecter) InlineCompletion(_a0 interface{}, _a1 interface{}) *MockServer_protocol_InlineCompletion_Call {
	return &MockServer_protocol_InlineCompletion_Call{Call: _e.mock.On("InlineCompletion", _a0, _a1)}
}

func (_c *MockServer_protocol_InlineCompletion_Call) Run(run func(_a0 context.Context, _a1 *protocol.InlineCompletionParams)) *MockServer_protocol_InlineCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.InlineCompletionParams))
	})
	return _c
}

func (_c *MockServer_protocol_InlineCompletion_Call) Return(_a0 *protocol.Or_Result_textDocument_inlineCompletion, _a1 error) *MockServer_protocol_InlineCompletion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_InlineCompletion_Call) RunAndReturn(run func(context.Context, *protocol.InlineCompletionParams) (*protocol.Or_Result_textDocument_inlineCompletion, error)) *MockServer_protocol_InlineCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// InlineValue provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) InlineValue(_a0 context.Context, _a1 *protocol.InlineValueParams) ([]protocol.InlineValue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InlineValue")
	}

	var r0 []protocol.InlineValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlineValueParams) ([]protocol.InlineValue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlineValueParams) []protocol.InlineValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.InlineValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.InlineValueParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_InlineValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InlineValue'
type MockServer_protocol_InlineValue_Call struct {
	*mock.Call
}

// InlineValue is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.InlineValueParams
func (_e *MockServer_protocol_Expecter) InlineValue(_a0 interface{}, _a1 interface{}) *MockServer_protocol_InlineValue_Call {
	return &MockServer_protocol_InlineValue_Call{Call: _e.mock.On("InlineValue", _a0, _a1)}
}

func (_c *MockServer_protocol_InlineValue_Call) Run(run func(_a0 context.Context, _a1 *protocol.InlineValueParams)) *MockServer_protocol_InlineValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.InlineValueParams))
	})
	return _c
}

func (_c *MockServer_protocol_InlineValue_Call) Return(_a0 []protocol.InlineValue, _a1 error) *MockServer_protocol_InlineValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_InlineValue_Call) RunAndReturn(run func(context.Context, *protocol.InlineValueParams) ([]protocol.InlineValue, error)) *MockServer_protocol_InlineValue_Call {
	_c.Call.Return(run)
	return _c
}

// LinkedEditingRange provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) LinkedEditingRange(_a0 context.Context, _a1 *protocol.LinkedEditingRangeParams) (*protocol.LinkedEditingRanges, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LinkedEditingRange")
	}

	var r0 *protocol.LinkedEditingRanges
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.LinkedEditingRangeParams) (*protocol.LinkedEditingRanges, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.LinkedEditingRangeParams) *protocol.LinkedEditingRanges); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.LinkedEditingRanges)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.LinkedEditingRangeParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_LinkedEditingRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkedEditingRange'
type MockServer_protocol_LinkedEditingRange_Call struct {
	*mock.Call
}

// LinkedEditingRange is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.LinkedEditingRangeParams
func (_e *MockServer_protocol_Expecter) LinkedEditingRange(_a0 interface{}, _a1 interface{}) *MockServer_protocol_LinkedEditingRange_Call {
	return &MockServer_protocol_LinkedEditingRange_Call{Call: _e.mock.On("LinkedEditingRange", _a0, _a1)}
}

func (_c *MockServer_protocol_LinkedEditingRange_Call) Run(run func(_a0 context.Context, _a1 *protocol.LinkedEditingRangeParams)) *MockServer_protocol_LinkedEditingRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.LinkedEditingRangeParams))
	})
	return _c
}

func (_c *MockServer_protocol_LinkedEditingRange_Call) Return(_a0 *protocol.LinkedEditingRanges, _a1 error) *MockServer_protocol_LinkedEditingRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_LinkedEditingRange_Call) RunAndReturn(run func(context.Context, *protocol.LinkedEditingRangeParams) (*protocol.LinkedEditingRanges, error)) *MockServer_protocol_LinkedEditingRange_Call {
	_c.Call.Return(run)
	return _c
}

// Moniker provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Moniker(_a0 context.Context, _a1 *protocol.MonikerParams) ([]protocol.Moniker, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Moniker")
	}

	var r0 []protocol.Moniker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.MonikerParams) ([]protocol.Moniker, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.MonikerParams) []protocol.Moniker); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.Moniker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.MonikerParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Moniker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Moniker'
type MockServer_protocol_Moniker_Call struct {
	*mock.Call
}

// Moniker is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.MonikerParams
func (_e *MockServer_protocol_Expecter) Moniker(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Moniker_Call {
	return &MockServer_protocol_Moniker_Call{Call: _e.mock.On("Moniker", _a0, _a1)}
}

func (_c *MockServer_protocol_Moniker_Call) Run(run func(_a0 context.Context, _a1 *protocol.MonikerParams)) *MockServer_protocol_Moniker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.MonikerParams))
	})
	return _c
}

func (_c *MockServer_protocol_Moniker_Call) Return(_a0 []protocol.Moniker, _a1 error) *MockServer_protocol_Moniker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Moniker_Call) RunAndReturn(run func(context.Context, *protocol.MonikerParams) ([]protocol.Moniker, error)) *MockServer_protocol_Moniker_Call {
	_c.Call.Return(run)
	return _c
}

// OnTypeFormatting provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) OnTypeFormatting(_a0 context.Context, _a1 *protocol.DocumentOnTypeFormattingParams) ([]protocol.TextEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OnTypeFormatting")
	}

	var r0 []protocol.TextEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentOnTypeFormattingParams) ([]protocol.TextEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentOnTypeFormattingParams) []protocol.TextEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TextEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentOnTypeFormattingParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_OnTypeFormatting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTypeFormatting'
type MockServer_protocol_OnTypeFormatting_Call struct {
	*mock.Call
}

// OnTypeFormatting is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentOnTypeFormattingParams
func (_e *MockServer_protocol_Expecter) OnTypeFormatting(_a0 interface{}, _a1 interface{}) *MockServer_protocol_OnTypeFormatting_Call {
	return &MockServer_protocol_OnTypeFormatting_Call{Call: _e.mock.On("OnTypeFormatting", _a0, _a1)}
}

func (_c *MockServer_protocol_OnTypeFormatting_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentOnTypeFormattingParams)) *MockServer_protocol_OnTypeFormatting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentOnTypeFormattingParams))
	})
	return _c
}

func (_c *MockServer_protocol_OnTypeFormatting_Call) Return(_a0 []protocol.TextEdit, _a1 error) *MockServer_protocol_OnTypeFormatting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_OnTypeFormatting_Call) RunAndReturn(run func(context.Context, *protocol.DocumentOnTypeFormattingParams) ([]protocol.TextEdit, error)) *MockServer_protocol_OnTypeFormatting_Call {
	_c.Call.Return(run)
	return _c
}

// OutgoingCalls provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) OutgoingCalls(_a0 context.Context, _a1 *protocol.CallHierarchyOutgoingCallsParams) ([]protocol.CallHierarchyOutgoingCall, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OutgoingCalls")
	}

	var r0 []protocol.CallHierarchyOutgoingCall
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CallHierarchyOutgoingCallsParams) ([]protocol.CallHierarchyOutgoingCall, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CallHierarchyOutgoingCallsParams) []protocol.CallHierarchyOutgoingCall); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.CallHierarchyOutgoingCall)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CallHierarchyOutgoingCallsParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_OutgoingCalls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutgoingCalls'
type MockServer_protocol_OutgoingCalls_Call struct {
	*mock.Call
}

// OutgoingCalls is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CallHierarchyOutgoingCallsParams
func (_e *MockServer_protocol_Expecter) OutgoingCalls(_a0 interface{}, _a1 interface{}) *MockServer_protocol_OutgoingCalls_Call {
	return &MockServer_protocol_OutgoingCalls_Call{Call: _e.mock.On("OutgoingCalls", _a0, _a1)}
}

func (_c *MockServer_protocol_OutgoingCalls_Call) Run(run func(_a0 context.Context, _a1 *protocol.CallHierarchyOutgoingCallsParams)) *MockServer_protocol_OutgoingCalls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CallHierarchyOutgoingCallsParams))
	})
	return _c
}

func (_c *MockServer_protocol_OutgoingCalls_Call) Return(_a0 []protocol.CallHierarchyOutgoingCall, _a1 error) *MockServer_protocol_OutgoingCalls_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_OutgoingCalls_Call) RunAndReturn(run func(context.Context, *protocol.CallHierarchyOutgoingCallsParams) ([]protocol.CallHierarchyOutgoingCall, error)) *MockServer_protocol_OutgoingCalls_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareCallHierarchy provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) PrepareCallHierarchy(_a0 context.Context, _a1 *protocol.CallHierarchyPrepareParams) ([]protocol.CallHierarchyItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PrepareCallHierarchy")
	}

	var r0 []protocol.CallHierarchyItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CallHierarchyPrepareParams) ([]protocol.CallHierarchyItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CallHierarchyPrepareParams) []protocol.CallHierarchyItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.CallHierarchyItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CallHierarchyPrepareParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_PrepareCallHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareCallHierarchy'
type MockServer_protocol_PrepareCallHierarchy_Call struct {
	*mock.Call
}

// PrepareCallHierarchy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CallHierarchyPrepareParams
func (_e *MockServer_protocol_Expecter) PrepareCallHierarchy(_a0 interface{}, _a1 interface{}) *MockServer_protocol_PrepareCallHierarchy_Call {
	return &MockServer_protocol_PrepareCallHierarchy_Call{Call: _e.mock.On("PrepareCallHierarchy", _a0, _a1)}
}

func (_c *MockServer_protocol_PrepareCallHierarchy_Call) Run(run func(_a0 context.Context, _a1 *protocol.CallHierarchyPrepareParams)) *MockServer_protocol_PrepareCallHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CallHierarchyPrepareParams))
	})
	return _c
}

func (_c *MockServer_protocol_PrepareCallHierarchy_Call) Return(_a0 []protocol.CallHierarchyItem, _a1 error) *MockServer_protocol_PrepareCallHierarchy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_PrepareCallHierarchy_Call) RunAndReturn(run func(context.Context, *protocol.CallHierarchyPrepareParams) ([]protocol.CallHierarchyItem, error)) *MockServer_protocol_PrepareCallHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareRename provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) PrepareRename(_a0 context.Context, _a1 *protocol.PrepareRenameParams) (*protocol.PrepareRenameResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PrepareRename")
	}

	var r0 *protocol.PrepareRenameResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.PrepareRenameParams) (*protocol.PrepareRenameResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.PrepareRenameParams) *protocol.PrepareRenameResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.PrepareRenameResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.PrepareRenameParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_PrepareRename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareRename'
type MockServer_protocol_PrepareRename_Call struct {
	*mock.Call
}

// PrepareRename is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.PrepareRenameParams
func (_e *MockServer_protocol_Expecter) PrepareRename(_a0 interface{}, _a1 interface{}) *MockServer_protocol_PrepareRename_Call {
	return &MockServer_protocol_PrepareRename_Call{Call: _e.mock.On("PrepareRename", _a0, _a1)}
}

func (_c *MockServer_protocol_PrepareRename_Call) Run(run func(_a0 context.Context, _a1 *protocol.PrepareRenameParams)) *MockServer_protocol_PrepareRename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.PrepareRenameParams))
	})
	return _c
}

func (_c *MockServer_protocol_PrepareRename_Call) Return(_a0 *protocol.PrepareRenameResult, _a1 error) *MockServer_protocol_PrepareRename_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_PrepareRename_Call) RunAndReturn(run func(context.Context, *protocol.PrepareRenameParams) (*protocol.PrepareRenameResult, error)) *MockServer_protocol_PrepareRename_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareTypeHierarchy provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) PrepareTypeHierarchy(_a0 context.Context, _a1 *protocol.TypeHierarchyPrepareParams) ([]protocol.TypeHierarchyItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTypeHierarchy")
	}

	var r0 []protocol.TypeHierarchyItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeHierarchyPrepareParams) ([]protocol.TypeHierarchyItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeHierarchyPrepareParams) []protocol.TypeHierarchyItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TypeHierarchyItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.TypeHierarchyPrepareParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_PrepareTypeHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareTypeHierarchy'
type MockServer_protocol_PrepareTypeHierarchy_Call struct {
	*mock.Call
}

// PrepareTypeHierarchy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.TypeHierarchyPrepareParams
func (_e *MockServer_protocol_Expecter) PrepareTypeHierarchy(_a0 interface{}, _a1 interface{}) *MockServer_protocol_PrepareTypeHierarchy_Call {
	return &MockServer_protocol_PrepareTypeHierarchy_Call{Call: _e.mock.On("PrepareTypeHierarchy", _a0, _a1)}
}

func (_c *MockServer_protocol_PrepareTypeHierarchy_Call) Run(run func(_a0 context.Context, _a1 *protocol.TypeHierarchyPrepareParams)) *MockServer_protocol_PrepareTypeHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.TypeHierarchyPrepareParams))
	})
	return _c
}

func (_c *MockServer_protocol_PrepareTypeHierarchy_Call) Return(_a0 []protocol.TypeHierarchyItem, _a1 error) *MockServer_protocol_PrepareTypeHierarchy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_PrepareTypeHierarchy_Call) RunAndReturn(run func(context.Context, *protocol.TypeHierarchyPrepareParams) ([]protocol.TypeHierarchyItem, error)) *MockServer_protocol_PrepareTypeHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Progress(_a0 context.Context, _a1 *protocol.ProgressParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ProgressParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type MockServer_protocol_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ProgressParams
func (_e *MockServer_protocol_Expecter) Progress(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Progress_Call {
	return &MockServer_protocol_Progress_Call{Call: _e.mock.On("Progress", _a0, _a1)}
}

func (_c *MockServer_protocol_Progress_Call) Run(run func(_a0 context.Context, _a1 *protocol.ProgressParams)) *MockServer_protocol_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ProgressParams))
	})
	return _c
}

func (_c *MockServer_protocol_Progress_Call) Return(_a0 error) *MockServer_protocol_Progress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_Progress_Call) RunAndReturn(run func(context.Context, *protocol.ProgressParams) error) *MockServer_protocol_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// RangeFormatting provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) RangeFormatting(_a0 context.Context, _a1 *protocol.DocumentRangeFormattingParams) ([]protocol.TextEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RangeFormatting")
	}

	var r0 []protocol.TextEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentRangeFormattingParams) ([]protocol.TextEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentRangeFormattingParams) []protocol.TextEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TextEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentRangeFormattingParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_RangeFormatting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeFormatting'
type MockServer_protocol_RangeFormatting_Call struct {
	*mock.Call
}

// RangeFormatting is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentRangeFormattingParams
func (_e *MockServer_protocol_Expecter) RangeFormatting(_a0 interface{}, _a1 interface{}) *MockServer_protocol_RangeFormatting_Call {
	return &MockServer_protocol_RangeFormatting_Call{Call: _e.mock.On("RangeFormatting", _a0, _a1)}
}

func (_c *MockServer_protocol_RangeFormatting_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentRangeFormattingParams)) *MockServer_protocol_RangeFormatting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentRangeFormattingParams))
	})
	return _c
}

func (_c *MockServer_protocol_RangeFormatting_Call) Return(_a0 []protocol.TextEdit, _a1 error) *MockServer_protocol_RangeFormatting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_RangeFormatting_Call) RunAndReturn(run func(context.Context, *protocol.DocumentRangeFormattingParams) ([]protocol.TextEdit, error)) *MockServer_protocol_RangeFormatting_Call {
	_c.Call.Return(run)
	return _c
}

// RangesFormatting provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) RangesFormatting(_a0 context.Context, _a1 *protocol.DocumentRangesFormattingParams) ([]protocol.TextEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RangesFormatting")
	}

	var r0 []protocol.TextEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentRangesFormattingParams) ([]protocol.TextEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentRangesFormattingParams) []protocol.TextEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TextEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentRangesFormattingParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_RangesFormatting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangesFormatting'
type MockServer_protocol_RangesFormatting_Call struct {
	*mock.Call
}

// RangesFormatting is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentRangesFormattingParams
func (_e *MockServer_protocol_Expecter) RangesFormatting(_a0 interface{}, _a1 interface{}) *MockServer_protocol_RangesFormatting_Call {
	return &MockServer_protocol_RangesFormatting_Call{Call: _e.mock.On("RangesFormatting", _a0, _a1)}
}

func (_c *MockServer_protocol_RangesFormatting_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentRangesFormattingParams)) *MockServer_protocol_RangesFormatting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentRangesFormattingParams))
	})
	return _c
}

func (_c *MockServer_protocol_RangesFormatting_Call) Return(_a0 []protocol.TextEdit, _a1 error) *MockServer_protocol_RangesFormatting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_RangesFormatting_Call) RunAndReturn(run func(context.Context, *protocol.DocumentRangesFormattingParams) ([]protocol.TextEdit, error)) *MockServer_protocol_RangesFormatting_Call {
	_c.Call.Return(run)
	return _c
}

// References provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) References(_a0 context.Context, _a1 *protocol.ReferenceParams) ([]protocol.Location, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for References")
	}

	var r0 []protocol.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ReferenceParams) ([]protocol.Location, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.ReferenceParams) []protocol.Location); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.ReferenceParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_References_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'References'
type MockServer_protocol_References_Call struct {
	*mock.Call
}

// References is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.ReferenceParams
func (_e *MockServer_protocol_Expecter) References(_a0 interface{}, _a1 interface{}) *MockServer_protocol_References_Call {
	return &MockServer_protocol_References_Call{Call: _e.mock.On("References", _a0, _a1)}
}

func (_c *MockServer_protocol_References_Call) Run(run func(_a0 context.Context, _a1 *protocol.ReferenceParams)) *MockServer_protocol_References_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.ReferenceParams))
	})
	return _c
}

func (_c *MockServer_protocol_References_Call) Return(_a0 []protocol.Location, _a1 error) *MockServer_protocol_References_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_References_Call) RunAndReturn(run func(context.Context, *protocol.ReferenceParams) ([]protocol.Location, error)) *MockServer_protocol_References_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Rename(_a0 context.Context, _a1 *protocol.RenameParams) (*protocol.WorkspaceEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 *protocol.WorkspaceEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RenameParams) (*protocol.WorkspaceEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RenameParams) *protocol.WorkspaceEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.WorkspaceEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.RenameParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type MockServer_protocol_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.RenameParams
func (_e *MockServer_protocol_Expecter) Rename(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Rename_Call {
	return &MockServer_protocol_Rename_Call{Call: _e.mock.On("Rename", _a0, _a1)}
}

func (_c *MockServer_protocol_Rename_Call) Run(run func(_a0 context.Context, _a1 *protocol.RenameParams)) *MockServer_protocol_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.RenameParams))
	})
	return _c
}

func (_c *MockServer_protocol_Rename_Call) Return(_a0 *protocol.WorkspaceEdit, _a1 error) *MockServer_protocol_Rename_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Rename_Call) RunAndReturn(run func(context.Context, *protocol.RenameParams) (*protocol.WorkspaceEdit, error)) *MockServer_protocol_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Resolve(_a0 context.Context, _a1 *protocol.InlayHint) (*protocol.InlayHint, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *protocol.InlayHint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlayHint) (*protocol.InlayHint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.InlayHint) *protocol.InlayHint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.InlayHint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.InlayHint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockServer_protocol_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.InlayHint
func (_e *MockServer_protocol_Expecter) Resolve(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Resolve_Call {
	return &MockServer_protocol_Resolve_Call{Call: _e.mock.On("Resolve", _a0, _a1)}
}

func (_c *MockServer_protocol_Resolve_Call) Run(run func(_a0 context.Context, _a1 *protocol.InlayHint)) *MockServer_protocol_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.InlayHint))
	})
	return _c
}

func (_c *MockServer_protocol_Resolve_Call) Return(_a0 *protocol.InlayHint, _a1 error) *MockServer_protocol_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Resolve_Call) RunAndReturn(run func(context.Context, *protocol.InlayHint) (*protocol.InlayHint, error)) *MockServer_protocol_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveCodeAction provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ResolveCodeAction(_a0 context.Context, _a1 *protocol.CodeAction) (*protocol.CodeAction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResolveCodeAction")
	}

	var r0 *protocol.CodeAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeAction) (*protocol.CodeAction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeAction) *protocol.CodeAction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CodeAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CodeAction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ResolveCodeAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveCodeAction'
type MockServer_protocol_ResolveCodeAction_Call struct {
	*mock.Call
}

// ResolveCodeAction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CodeAction
func (_e *MockServer_protocol_Expecter) ResolveCodeAction(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ResolveCodeAction_Call {
	return &MockServer_protocol_ResolveCodeAction_Call{Call: _e.mock.On("ResolveCodeAction", _a0, _a1)}
}

func (_c *MockServer_protocol_ResolveCodeAction_Call) Run(run func(_a0 context.Context, _a1 *protocol.CodeAction)) *MockServer_protocol_ResolveCodeAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CodeAction))
	})
	return _c
}

func (_c *MockServer_protocol_ResolveCodeAction_Call) Return(_a0 *protocol.CodeAction, _a1 error) *MockServer_protocol_ResolveCodeAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ResolveCodeAction_Call) RunAndReturn(run func(context.Context, *protocol.CodeAction) (*protocol.CodeAction, error)) *MockServer_protocol_ResolveCodeAction_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveCodeLens provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ResolveCodeLens(_a0 context.Context, _a1 *protocol.CodeLens) (*protocol.CodeLens, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResolveCodeLens")
	}

	var r0 *protocol.CodeLens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeLens) (*protocol.CodeLens, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CodeLens) *protocol.CodeLens); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CodeLens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CodeLens) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ResolveCodeLens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveCodeLens'
type MockServer_protocol_ResolveCodeLens_Call struct {
	*mock.Call
}

// ResolveCodeLens is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CodeLens
func (_e *MockServer_protocol_Expecter) ResolveCodeLens(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ResolveCodeLens_Call {
	return &MockServer_protocol_ResolveCodeLens_Call{Call: _e.mock.On("ResolveCodeLens", _a0, _a1)}
}

func (_c *MockServer_protocol_ResolveCodeLens_Call) Run(run func(_a0 context.Context, _a1 *protocol.CodeLens)) *MockServer_protocol_ResolveCodeLens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CodeLens))
	})
	return _c
}

func (_c *MockServer_protocol_ResolveCodeLens_Call) Return(_a0 *protocol.CodeLens, _a1 error) *MockServer_protocol_ResolveCodeLens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ResolveCodeLens_Call) RunAndReturn(run func(context.Context, *protocol.CodeLens) (*protocol.CodeLens, error)) *MockServer_protocol_ResolveCodeLens_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveCompletionItem provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ResolveCompletionItem(_a0 context.Context, _a1 *protocol.CompletionItem) (*protocol.CompletionItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResolveCompletionItem")
	}

	var r0 *protocol.CompletionItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CompletionItem) (*protocol.CompletionItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CompletionItem) *protocol.CompletionItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CompletionItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CompletionItem) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ResolveCompletionItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveCompletionItem'
type MockServer_protocol_ResolveCompletionItem_Call struct {
	*mock.Call
}

// ResolveCompletionItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CompletionItem
func (_e *MockServer_protocol_Expecter) ResolveCompletionItem(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ResolveCompletionItem_Call {
	return &MockServer_protocol_ResolveCompletionItem_Call{Call: _e.mock.On("ResolveCompletionItem", _a0, _a1)}
}

func (_c *MockServer_protocol_ResolveCompletionItem_Call) Run(run func(_a0 context.Context, _a1 *protocol.CompletionItem)) *MockServer_protocol_ResolveCompletionItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CompletionItem))
	})
	return _c
}

func (_c *MockServer_protocol_ResolveCompletionItem_Call) Return(_a0 *protocol.CompletionItem, _a1 error) *MockServer_protocol_ResolveCompletionItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ResolveCompletionItem_Call) RunAndReturn(run func(context.Context, *protocol.CompletionItem) (*protocol.CompletionItem, error)) *MockServer_protocol_ResolveCompletionItem_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveDocumentLink provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ResolveDocumentLink(_a0 context.Context, _a1 *protocol.DocumentLink) (*protocol.DocumentLink, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResolveDocumentLink")
	}

	var r0 *protocol.DocumentLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentLink) (*protocol.DocumentLink, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DocumentLink) *protocol.DocumentLink); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.DocumentLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DocumentLink) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ResolveDocumentLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveDocumentLink'
type MockServer_protocol_ResolveDocumentLink_Call struct {
	*mock.Call
}

// ResolveDocumentLink is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DocumentLink
func (_e *MockServer_protocol_Expecter) ResolveDocumentLink(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ResolveDocumentLink_Call {
	return &MockServer_protocol_ResolveDocumentLink_Call{Call: _e.mock.On("ResolveDocumentLink", _a0, _a1)}
}

func (_c *MockServer_protocol_ResolveDocumentLink_Call) Run(run func(_a0 context.Context, _a1 *protocol.DocumentLink)) *MockServer_protocol_ResolveDocumentLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DocumentLink))
	})
	return _c
}

func (_c *MockServer_protocol_ResolveDocumentLink_Call) Return(_a0 *protocol.DocumentLink, _a1 error) *MockServer_protocol_ResolveDocumentLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ResolveDocumentLink_Call) RunAndReturn(run func(context.Context, *protocol.DocumentLink) (*protocol.DocumentLink, error)) *MockServer_protocol_ResolveDocumentLink_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveWorkspaceSymbol provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) ResolveWorkspaceSymbol(_a0 context.Context, _a1 *protocol.WorkspaceSymbol) (*protocol.WorkspaceSymbol, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResolveWorkspaceSymbol")
	}

	var r0 *protocol.WorkspaceSymbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkspaceSymbol) (*protocol.WorkspaceSymbol, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkspaceSymbol) *protocol.WorkspaceSymbol); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.WorkspaceSymbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.WorkspaceSymbol) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_ResolveWorkspaceSymbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveWorkspaceSymbol'
type MockServer_protocol_ResolveWorkspaceSymbol_Call struct {
	*mock.Call
}

// ResolveWorkspaceSymbol is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WorkspaceSymbol
func (_e *MockServer_protocol_Expecter) ResolveWorkspaceSymbol(_a0 interface{}, _a1 interface{}) *MockServer_protocol_ResolveWorkspaceSymbol_Call {
	return &MockServer_protocol_ResolveWorkspaceSymbol_Call{Call: _e.mock.On("ResolveWorkspaceSymbol", _a0, _a1)}
}

func (_c *MockServer_protocol_ResolveWorkspaceSymbol_Call) Run(run func(_a0 context.Context, _a1 *protocol.WorkspaceSymbol)) *MockServer_protocol_ResolveWorkspaceSymbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WorkspaceSymbol))
	})
	return _c
}

func (_c *MockServer_protocol_ResolveWorkspaceSymbol_Call) Return(_a0 *protocol.WorkspaceSymbol, _a1 error) *MockServer_protocol_ResolveWorkspaceSymbol_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_ResolveWorkspaceSymbol_Call) RunAndReturn(run func(context.Context, *protocol.WorkspaceSymbol) (*protocol.WorkspaceSymbol, error)) *MockServer_protocol_ResolveWorkspaceSymbol_Call {
	_c.Call.Return(run)
	return _c
}

// SelectionRange provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) SelectionRange(_a0 context.Context, _a1 *protocol.SelectionRangeParams) ([]protocol.SelectionRange, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SelectionRange")
	}

	var r0 []protocol.SelectionRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SelectionRangeParams) ([]protocol.SelectionRange, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SelectionRangeParams) []protocol.SelectionRange); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.SelectionRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.SelectionRangeParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_SelectionRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectionRange'
type MockServer_protocol_SelectionRange_Call struct {
	*mock.Call
}

// SelectionRange is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.SelectionRangeParams
func (_e *MockServer_protocol_Expecter) SelectionRange(_a0 interface{}, _a1 interface{}) *MockServer_protocol_SelectionRange_Call {
	return &MockServer_protocol_SelectionRange_Call{Call: _e.mock.On("SelectionRange", _a0, _a1)}
}

func (_c *MockServer_protocol_SelectionRange_Call) Run(run func(_a0 context.Context, _a1 *protocol.SelectionRangeParams)) *MockServer_protocol_SelectionRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.SelectionRangeParams))
	})
	return _c
}

func (_c *MockServer_protocol_SelectionRange_Call) Return(_a0 []protocol.SelectionRange, _a1 error) *MockServer_protocol_SelectionRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_SelectionRange_Call) RunAndReturn(run func(context.Context, *protocol.SelectionRangeParams) ([]protocol.SelectionRange, error)) *MockServer_protocol_SelectionRange_Call {
	_c.Call.Return(run)
	return _c
}

// SemanticTokensFull provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) SemanticTokensFull(_a0 context.Context, _a1 *protocol.SemanticTokensParams) (*protocol.SemanticTokens, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SemanticTokensFull")
	}

	var r0 *protocol.SemanticTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SemanticTokensParams) (*protocol.SemanticTokens, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SemanticTokensParams) *protocol.SemanticTokens); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.SemanticTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.SemanticTokensParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_SemanticTokensFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SemanticTokensFull'
type MockServer_protocol_SemanticTokensFull_Call struct {
	*mock.Call
}

// SemanticTokensFull is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.SemanticTokensParams
func (_e *MockServer_protocol_Expecter) SemanticTokensFull(_a0 interface{}, _a1 interface{}) *MockServer_protocol_SemanticTokensFull_Call {
	return &MockServer_protocol_SemanticTokensFull_Call{Call: _e.mock.On("SemanticTokensFull", _a0, _a1)}
}

func (_c *MockServer_protocol_SemanticTokensFull_Call) Run(run func(_a0 context.Context, _a1 *protocol.SemanticTokensParams)) *MockServer_protocol_SemanticTokensFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.SemanticTokensParams))
	})
	return _c
}

func (_c *MockServer_protocol_SemanticTokensFull_Call) Return(_a0 *protocol.SemanticTokens, _a1 error) *MockServer_protocol_SemanticTokensFull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_SemanticTokensFull_Call) RunAndReturn(run func(context.Context, *protocol.SemanticTokensParams) (*protocol.SemanticTokens, error)) *MockServer_protocol_SemanticTokensFull_Call {
	_c.Call.Return(run)
	return _c
}

// SemanticTokensFullDelta provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) SemanticTokensFullDelta(_a0 context.Context, _a1 *protocol.SemanticTokensDeltaParams) (any, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SemanticTokensFullDelta")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SemanticTokensDeltaParams) (any, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SemanticTokensDeltaParams) any); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.SemanticTokensDeltaParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_SemanticTokensFullDelta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SemanticTokensFullDelta'
type MockServer_protocol_SemanticTokensFullDelta_Call struct {
	*mock.Call
}

// SemanticTokensFullDelta is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.SemanticTokensDeltaParams
func (_e *MockServer_protocol_Expecter) SemanticTokensFullDelta(_a0 interface{}, _a1 interface{}) *MockServer_protocol_SemanticTokensFullDelta_Call {
	return &MockServer_protocol_SemanticTokensFullDelta_Call{Call: _e.mock.On("SemanticTokensFullDelta", _a0, _a1)}
}

func (_c *MockServer_protocol_SemanticTokensFullDelta_Call) Run(run func(_a0 context.Context, _a1 *protocol.SemanticTokensDeltaParams)) *MockServer_protocol_SemanticTokensFullDelta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.SemanticTokensDeltaParams))
	})
	return _c
}

func (_c *MockServer_protocol_SemanticTokensFullDelta_Call) Return(_a0 any, _a1 error) *MockServer_protocol_SemanticTokensFullDelta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_SemanticTokensFullDelta_Call) RunAndReturn(run func(context.Context, *protocol.SemanticTokensDeltaParams) (any, error)) *MockServer_protocol_SemanticTokensFullDelta_Call {
	_c.Call.Return(run)
	return _c
}

// SemanticTokensRange provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) SemanticTokensRange(_a0 context.Context, _a1 *protocol.SemanticTokensRangeParams) (*protocol.SemanticTokens, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SemanticTokensRange")
	}

	var r0 *protocol.SemanticTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SemanticTokensRangeParams) (*protocol.SemanticTokens, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SemanticTokensRangeParams) *protocol.SemanticTokens); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.SemanticTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.SemanticTokensRangeParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_SemanticTokensRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SemanticTokensRange'
type MockServer_protocol_SemanticTokensRange_Call struct {
	*mock.Call
}

// SemanticTokensRange is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.SemanticTokensRangeParams
func (_e *MockServer_protocol_Expecter) SemanticTokensRange(_a0 interface{}, _a1 interface{}) *MockServer_protocol_SemanticTokensRange_Call {
	return &MockServer_protocol_SemanticTokensRange_Call{Call: _e.mock.On("SemanticTokensRange", _a0, _a1)}
}

func (_c *MockServer_protocol_SemanticTokensRange_Call) Run(run func(_a0 context.Context, _a1 *protocol.SemanticTokensRangeParams)) *MockServer_protocol_SemanticTokensRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.SemanticTokensRangeParams))
	})
	return _c
}

func (_c *MockServer_protocol_SemanticTokensRange_Call) Return(_a0 *protocol.SemanticTokens, _a1 error) *MockServer_protocol_SemanticTokensRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_SemanticTokensRange_Call) RunAndReturn(run func(context.Context, *protocol.SemanticTokensRangeParams) (*protocol.SemanticTokens, error)) *MockServer_protocol_SemanticTokensRange_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrace provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) SetTrace(_a0 context.Context, _a1 *protocol.SetTraceParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetTrace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SetTraceParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_SetTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrace'
type MockServer_protocol_SetTrace_Call struct {
	*mock.Call
}

// SetTrace is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.SetTraceParams
func (_e *MockServer_protocol_Expecter) SetTrace(_a0 interface{}, _a1 interface{}) *MockServer_protocol_SetTrace_Call {
	return &MockServer_protocol_SetTrace_Call{Call: _e.mock.On("SetTrace", _a0, _a1)}
}

func (_c *MockServer_protocol_SetTrace_Call) Run(run func(_a0 context.Context, _a1 *protocol.SetTraceParams)) *MockServer_protocol_SetTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.SetTraceParams))
	})
	return _c
}

func (_c *MockServer_protocol_SetTrace_Call) Return(_a0 error) *MockServer_protocol_SetTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_SetTrace_Call) RunAndReturn(run func(context.Context, *protocol.SetTraceParams) error) *MockServer_protocol_SetTrace_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: _a0
func (_m *MockServer_protocol) Shutdown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockServer_protocol_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockServer_protocol_Expecter) Shutdown(_a0 interface{}) *MockServer_protocol_Shutdown_Call {
	return &MockServer_protocol_Shutdown_Call{Call: _e.mock.On("Shutdown", _a0)}
}

func (_c *MockServer_protocol_Shutdown_Call) Run(run func(_a0 context.Context)) *MockServer_protocol_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServer_protocol_Shutdown_Call) Return(_a0 error) *MockServer_protocol_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockServer_protocol_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// SignatureHelp provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) SignatureHelp(_a0 context.Context, _a1 *protocol.SignatureHelpParams) (*protocol.SignatureHelp, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignatureHelp")
	}

	var r0 *protocol.SignatureHelp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SignatureHelpParams) (*protocol.SignatureHelp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.SignatureHelpParams) *protocol.SignatureHelp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.SignatureHelp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.SignatureHelpParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_SignatureHelp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignatureHelp'
type MockServer_protocol_SignatureHelp_Call struct {
	*mock.Call
}

// SignatureHelp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.SignatureHelpParams
func (_e *MockServer_protocol_Expecter) SignatureHelp(_a0 interface{}, _a1 interface{}) *MockServer_protocol_SignatureHelp_Call {
	return &MockServer_protocol_SignatureHelp_Call{Call: _e.mock.On("SignatureHelp", _a0, _a1)}
}

func (_c *MockServer_protocol_SignatureHelp_Call) Run(run func(_a0 context.Context, _a1 *protocol.SignatureHelpParams)) *MockServer_protocol_SignatureHelp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.SignatureHelpParams))
	})
	return _c
}

func (_c *MockServer_protocol_SignatureHelp_Call) Return(_a0 *protocol.SignatureHelp, _a1 error) *MockServer_protocol_SignatureHelp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_SignatureHelp_Call) RunAndReturn(run func(context.Context, *protocol.SignatureHelpParams) (*protocol.SignatureHelp, error)) *MockServer_protocol_SignatureHelp_Call {
	_c.Call.Return(run)
	return _c
}

// Subtypes provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Subtypes(_a0 context.Context, _a1 *protocol.TypeHierarchySubtypesParams) ([]protocol.TypeHierarchyItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Subtypes")
	}

	var r0 []protocol.TypeHierarchyItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeHierarchySubtypesParams) ([]protocol.TypeHierarchyItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeHierarchySubtypesParams) []protocol.TypeHierarchyItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TypeHierarchyItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.TypeHierarchySubtypesParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Subtypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subtypes'
type MockServer_protocol_Subtypes_Call struct {
	*mock.Call
}

// Subtypes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.TypeHierarchySubtypesParams
func (_e *MockServer_protocol_Expecter) Subtypes(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Subtypes_Call {
	return &MockServer_protocol_Subtypes_Call{Call: _e.mock.On("Subtypes", _a0, _a1)}
}

func (_c *MockServer_protocol_Subtypes_Call) Run(run func(_a0 context.Context, _a1 *protocol.TypeHierarchySubtypesParams)) *MockServer_protocol_Subtypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.TypeHierarchySubtypesParams))
	})
	return _c
}

func (_c *MockServer_protocol_Subtypes_Call) Return(_a0 []protocol.TypeHierarchyItem, _a1 error) *MockServer_protocol_Subtypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Subtypes_Call) RunAndReturn(run func(context.Context, *protocol.TypeHierarchySubtypesParams) ([]protocol.TypeHierarchyItem, error)) *MockServer_protocol_Subtypes_Call {
	_c.Call.Return(run)
	return _c
}

// Supertypes provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Supertypes(_a0 context.Context, _a1 *protocol.TypeHierarchySupertypesParams) ([]protocol.TypeHierarchyItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Supertypes")
	}

	var r0 []protocol.TypeHierarchyItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeHierarchySupertypesParams) ([]protocol.TypeHierarchyItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeHierarchySupertypesParams) []protocol.TypeHierarchyItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TypeHierarchyItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.TypeHierarchySupertypesParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Supertypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Supertypes'
type MockServer_protocol_Supertypes_Call struct {
	*mock.Call
}

// Supertypes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.TypeHierarchySupertypesParams
func (_e *MockServer_protocol_Expecter) Supertypes(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Supertypes_Call {
	return &MockServer_protocol_Supertypes_Call{Call: _e.mock.On("Supertypes", _a0, _a1)}
}

func (_c *MockServer_protocol_Supertypes_Call) Run(run func(_a0 context.Context, _a1 *protocol.TypeHierarchySupertypesParams)) *MockServer_protocol_Supertypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.TypeHierarchySupertypesParams))
	})
	return _c
}

func (_c *MockServer_protocol_Supertypes_Call) Return(_a0 []protocol.TypeHierarchyItem, _a1 error) *MockServer_protocol_Supertypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Supertypes_Call) RunAndReturn(run func(context.Context, *protocol.TypeHierarchySupertypesParams) ([]protocol.TypeHierarchyItem, error)) *MockServer_protocol_Supertypes_Call {
	_c.Call.Return(run)
	return _c
}

// Symbol provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) Symbol(_a0 context.Context, _a1 *protocol.WorkspaceSymbolParams) ([]protocol.SymbolInformation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Symbol")
	}

	var r0 []protocol.SymbolInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkspaceSymbolParams) ([]protocol.SymbolInformation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkspaceSymbolParams) []protocol.SymbolInformation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.SymbolInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.WorkspaceSymbolParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_Symbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Symbol'
type MockServer_protocol_Symbol_Call struct {
	*mock.Call
}

// Symbol is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WorkspaceSymbolParams
func (_e *MockServer_protocol_Expecter) Symbol(_a0 interface{}, _a1 interface{}) *MockServer_protocol_Symbol_Call {
	return &MockServer_protocol_Symbol_Call{Call: _e.mock.On("Symbol", _a0, _a1)}
}

func (_c *MockServer_protocol_Symbol_Call) Run(run func(_a0 context.Context, _a1 *protocol.WorkspaceSymbolParams)) *MockServer_protocol_Symbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WorkspaceSymbolParams))
	})
	return _c
}

func (_c *MockServer_protocol_Symbol_Call) Return(_a0 []protocol.SymbolInformation, _a1 error) *MockServer_protocol_Symbol_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_Symbol_Call) RunAndReturn(run func(context.Context, *protocol.WorkspaceSymbolParams) ([]protocol.SymbolInformation, error)) *MockServer_protocol_Symbol_Call {
	_c.Call.Return(run)
	return _c
}

// TextDocumentContent provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) TextDocumentContent(_a0 context.Context, _a1 *protocol.TextDocumentContentParams) (*string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TextDocumentContent")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TextDocumentContentParams) (*string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TextDocumentContentParams) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.TextDocumentContentParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_TextDocumentContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextDocumentContent'
type MockServer_protocol_TextDocumentContent_Call struct {
	*mock.Call
}

// TextDocumentContent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.TextDocumentContentParams
func (_e *MockServer_protocol_Expecter) TextDocumentContent(_a0 interface{}, _a1 interface{}) *MockServer_protocol_TextDocumentContent_Call {
	return &MockServer_protocol_TextDocumentContent_Call{Call: _e.mock.On("TextDocumentContent", _a0, _a1)}
}

func (_c *MockServer_protocol_TextDocumentContent_Call) Run(run func(_a0 context.Context, _a1 *protocol.TextDocumentContentParams)) *MockServer_protocol_TextDocumentContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.TextDocumentContentParams))
	})
	return _c
}

func (_c *MockServer_protocol_TextDocumentContent_Call) Return(_a0 *string, _a1 error) *MockServer_protocol_TextDocumentContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_TextDocumentContent_Call) RunAndReturn(run func(context.Context, *protocol.TextDocumentContentParams) (*string, error)) *MockServer_protocol_TextDocumentContent_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDefinition provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) TypeDefinition(_a0 context.Context, _a1 *protocol.TypeDefinitionParams) ([]protocol.Location, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TypeDefinition")
	}

	var r0 []protocol.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeDefinitionParams) ([]protocol.Location, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.TypeDefinitionParams) []protocol.Location); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.TypeDefinitionParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_TypeDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDefinition'
type MockServer_protocol_TypeDefinition_Call struct {
	*mock.Call
}

// TypeDefinition is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.TypeDefinitionParams
func (_e *MockServer_protocol_Expecter) TypeDefinition(_a0 interface{}, _a1 interface{}) *MockServer_protocol_TypeDefinition_Call {
	return &MockServer_protocol_TypeDefinition_Call{Call: _e.mock.On("TypeDefinition", _a0, _a1)}
}

func (_c *MockServer_protocol_TypeDefinition_Call) Run(run func(_a0 context.Context, _a1 *protocol.TypeDefinitionParams)) *MockServer_protocol_TypeDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.TypeDefinitionParams))
	})
	return _c
}

func (_c *MockServer_protocol_TypeDefinition_Call) Return(_a0 []protocol.Location, _a1 error) *MockServer_protocol_TypeDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_TypeDefinition_Call) RunAndReturn(run func(context.Context, *protocol.TypeDefinitionParams) ([]protocol.Location, error)) *MockServer_protocol_TypeDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// WillCreateFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) WillCreateFiles(_a0 context.Context, _a1 *protocol.CreateFilesParams) (*protocol.WorkspaceEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WillCreateFiles")
	}

	var r0 *protocol.WorkspaceEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CreateFilesParams) (*protocol.WorkspaceEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.CreateFilesParams) *protocol.WorkspaceEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.WorkspaceEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.CreateFilesParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_WillCreateFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WillCreateFiles'
type MockServer_protocol_WillCreateFiles_Call struct {
	*mock.Call
}

// WillCreateFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.CreateFilesParams
func (_e *MockServer_protocol_Expecter) WillCreateFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_WillCreateFiles_Call {
	return &MockServer_protocol_WillCreateFiles_Call{Call: _e.mock.On("WillCreateFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_WillCreateFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.CreateFilesParams)) *MockServer_protocol_WillCreateFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.CreateFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_WillCreateFiles_Call) Return(_a0 *protocol.WorkspaceEdit, _a1 error) *MockServer_protocol_WillCreateFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_WillCreateFiles_Call) RunAndReturn(run func(context.Context, *protocol.CreateFilesParams) (*protocol.WorkspaceEdit, error)) *MockServer_protocol_WillCreateFiles_Call {
	_c.Call.Return(run)
	return _c
}

// WillDeleteFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) WillDeleteFiles(_a0 context.Context, _a1 *protocol.DeleteFilesParams) (*protocol.WorkspaceEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WillDeleteFiles")
	}

	var r0 *protocol.WorkspaceEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeleteFilesParams) (*protocol.WorkspaceEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.DeleteFilesParams) *protocol.WorkspaceEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.WorkspaceEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.DeleteFilesParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_WillDeleteFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WillDeleteFiles'
type MockServer_protocol_WillDeleteFiles_Call struct {
	*mock.Call
}

// WillDeleteFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.DeleteFilesParams
func (_e *MockServer_protocol_Expecter) WillDeleteFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_WillDeleteFiles_Call {
	return &MockServer_protocol_WillDeleteFiles_Call{Call: _e.mock.On("WillDeleteFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_WillDeleteFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.DeleteFilesParams)) *MockServer_protocol_WillDeleteFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.DeleteFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_WillDeleteFiles_Call) Return(_a0 *protocol.WorkspaceEdit, _a1 error) *MockServer_protocol_WillDeleteFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_WillDeleteFiles_Call) RunAndReturn(run func(context.Context, *protocol.DeleteFilesParams) (*protocol.WorkspaceEdit, error)) *MockServer_protocol_WillDeleteFiles_Call {
	_c.Call.Return(run)
	return _c
}

// WillRenameFiles provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) WillRenameFiles(_a0 context.Context, _a1 *protocol.RenameFilesParams) (*protocol.WorkspaceEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WillRenameFiles")
	}

	var r0 *protocol.WorkspaceEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RenameFilesParams) (*protocol.WorkspaceEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.RenameFilesParams) *protocol.WorkspaceEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.WorkspaceEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.RenameFilesParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_WillRenameFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WillRenameFiles'
type MockServer_protocol_WillRenameFiles_Call struct {
	*mock.Call
}

// WillRenameFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.RenameFilesParams
func (_e *MockServer_protocol_Expecter) WillRenameFiles(_a0 interface{}, _a1 interface{}) *MockServer_protocol_WillRenameFiles_Call {
	return &MockServer_protocol_WillRenameFiles_Call{Call: _e.mock.On("WillRenameFiles", _a0, _a1)}
}

func (_c *MockServer_protocol_WillRenameFiles_Call) Run(run func(_a0 context.Context, _a1 *protocol.RenameFilesParams)) *MockServer_protocol_WillRenameFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.RenameFilesParams))
	})
	return _c
}

func (_c *MockServer_protocol_WillRenameFiles_Call) Return(_a0 *protocol.WorkspaceEdit, _a1 error) *MockServer_protocol_WillRenameFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_WillRenameFiles_Call) RunAndReturn(run func(context.Context, *protocol.RenameFilesParams) (*protocol.WorkspaceEdit, error)) *MockServer_protocol_WillRenameFiles_Call {
	_c.Call.Return(run)
	return _c
}

// WillSave provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) WillSave(_a0 context.Context, _a1 *protocol.WillSaveTextDocumentParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WillSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WillSaveTextDocumentParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_WillSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WillSave'
type MockServer_protocol_WillSave_Call struct {
	*mock.Call
}

// WillSave is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WillSaveTextDocumentParams
func (_e *MockServer_protocol_Expecter) WillSave(_a0 interface{}, _a1 interface{}) *MockServer_protocol_WillSave_Call {
	return &MockServer_protocol_WillSave_Call{Call: _e.mock.On("WillSave", _a0, _a1)}
}

func (_c *MockServer_protocol_WillSave_Call) Run(run func(_a0 context.Context, _a1 *protocol.WillSaveTextDocumentParams)) *MockServer_protocol_WillSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WillSaveTextDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_WillSave_Call) Return(_a0 error) *MockServer_protocol_WillSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_WillSave_Call) RunAndReturn(run func(context.Context, *protocol.WillSaveTextDocumentParams) error) *MockServer_protocol_WillSave_Call {
	_c.Call.Return(run)
	return _c
}

// WillSaveWaitUntil provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) WillSaveWaitUntil(_a0 context.Context, _a1 *protocol.WillSaveTextDocumentParams) ([]protocol.TextEdit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WillSaveWaitUntil")
	}

	var r0 []protocol.TextEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WillSaveTextDocumentParams) ([]protocol.TextEdit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WillSaveTextDocumentParams) []protocol.TextEdit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.TextEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.WillSaveTextDocumentParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServer_protocol_WillSaveWaitUntil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WillSaveWaitUntil'
type MockServer_protocol_WillSaveWaitUntil_Call struct {
	*mock.Call
}

// WillSaveWaitUntil is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WillSaveTextDocumentParams
func (_e *MockServer_protocol_Expecter) WillSaveWaitUntil(_a0 interface{}, _a1 interface{}) *MockServer_protocol_WillSaveWaitUntil_Call {
	return &MockServer_protocol_WillSaveWaitUntil_Call{Call: _e.mock.On("WillSaveWaitUntil", _a0, _a1)}
}

func (_c *MockServer_protocol_WillSaveWaitUntil_Call) Run(run func(_a0 context.Context, _a1 *protocol.WillSaveTextDocumentParams)) *MockServer_protocol_WillSaveWaitUntil_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WillSaveTextDocumentParams))
	})
	return _c
}

func (_c *MockServer_protocol_WillSaveWaitUntil_Call) Return(_a0 []protocol.TextEdit, _a1 error) *MockServer_protocol_WillSaveWaitUntil_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServer_protocol_WillSaveWaitUntil_Call) RunAndReturn(run func(context.Context, *protocol.WillSaveTextDocumentParams) ([]protocol.TextEdit, error)) *MockServer_protocol_WillSaveWaitUntil_Call {
	_c.Call.Return(run)
	return _c
}

// WorkDoneProgressCancel provides a mock function with given fields: _a0, _a1
func (_m *MockServer_protocol) WorkDoneProgressCancel(_a0 context.Context, _a1 *protocol.WorkDoneProgressCancelParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WorkDoneProgressCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.WorkDoneProgressCancelParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_protocol_WorkDoneProgressCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkDoneProgressCancel'
type MockServer_protocol_WorkDoneProgressCancel_Call struct {
	*mock.Call
}

// WorkDoneProgressCancel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protocol.WorkDoneProgressCancelParams
func (_e *MockServer_protocol_Expecter) WorkDoneProgressCancel(_a0 interface{}, _a1 interface{}) *MockServer_protocol_WorkDoneProgressCancel_Call {
	return &MockServer_protocol_WorkDoneProgressCancel_Call{Call: _e.mock.On("WorkDoneProgressCancel", _a0, _a1)}
}

func (_c *MockServer_protocol_WorkDoneProgressCancel_Call) Run(run func(_a0 context.Context, _a1 *protocol.WorkDoneProgressCancelParams)) *MockServer_protocol_WorkDoneProgressCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.WorkDoneProgressCancelParams))
	})
	return _c
}

func (_c *MockServer_protocol_WorkDoneProgressCancel_Call) Return(_a0 error) *MockServer_protocol_WorkDoneProgressCancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_protocol_WorkDoneProgressCancel_Call) RunAndReturn(run func(context.Context, *protocol.WorkDoneProgressCancelParams) error) *MockServer_protocol_WorkDoneProgressCancel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServer_protocol creates a new instance of MockServer_protocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServer_protocol(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServer_protocol {
	mock := &MockServer_protocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
