// Code generated by schema-generate. DO NOT EDIT.

package {{if contains .PackageName "/" }}{{lastPathComponent .PackageName}}{{else}}{{.PackageName}}{{end}}

import (
	"encoding/json"
	"fmt"
)

{{range .Aliases}}
// {{.Name}}
type {{.Name}} {{.Type}}
{{end}}

{{range $struct := .Structs}}
{{if $struct.Description}}
// {{$struct.Name}} {{$struct.Description}}
{{end}}
type {{$struct.Name}} struct {
	{{if or (hasSuffix $struct.Name "_AnyOf") (hasSuffix $struct.Name "_OneOf")}}
	Value interface{} `json:"-,inline"`
	{{else}}
	{{range $fieldName := getOrderedFieldNames $struct.Fields}}
		{{with $field := (index $struct.Fields $fieldName)}}
			{{if $field.Description}}
			// {{$field.Description}}
			{{end}}
			{{$field.Name}} {{$field.Type}} `json:"{{$field.JSONName}}{{if not $field.Required}},omitempty{{end}}"`
		{{end}}
	{{end}}
	{{end}}
}

{{if $struct.GenerateCode}}
	{{if hasSuffix $struct.Name "_AnyOf"}}
	// UnmarshalJSON implements json.Unmarshaler
	func (a *{{$struct.Name}}) UnmarshalJSON(data []byte) error {
		var v interface{}
		if err := json.Unmarshal(data, &v); err != nil {
			return fmt.Errorf("value does not match any of the expected types: %w", err)
		}
		a.Value = v
		return nil
	}

	// MarshalJSON implements json.Marshaler
	func (a *{{$struct.Name}}) MarshalJSON() ([]byte, error) {
		if a.Value == nil {
			return []byte("null"), nil
		}
		return json.Marshal(a.Value)
	}
	{{end}}

	{{if hasSuffix $struct.Name "_OneOf"}}
	// UnmarshalJSON implements json.Unmarshaler
	func (o *{{$struct.Name}}) UnmarshalJSON(data []byte) error {
		var v interface{}
		if err := json.Unmarshal(data, &v); err != nil {
			return fmt.Errorf("value must match exactly one of the expected types: %w", err)
		}
		
		// For OneOf, we need to validate that the value matches exactly one schema
		switch v.(type) {
		case string, float64, nil:
			o.Value = v
			return nil
		case map[string]interface{}, []interface{}, bool, json.Number:
			return fmt.Errorf("value must match exactly one of the expected types")
		default:
			return fmt.Errorf("value must match exactly one of the expected types")
		}
	}

	// MarshalJSON implements json.Marshaler
	func (o *{{$struct.Name}}) MarshalJSON() ([]byte, error) {
		if o.Value == nil {
			return []byte("null"), nil
		}
		return json.Marshal(o.Value)
	}
	{{end}}
{{end}}
{{end}}